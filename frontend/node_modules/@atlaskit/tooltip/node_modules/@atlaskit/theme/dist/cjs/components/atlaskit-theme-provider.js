"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _colors = require("../colors");

var _constants = require("../constants");

var _useThemeResetStyles = _interopRequireWildcard(require("./hooks/use-theme-reset-styles"));

var _theme = _interopRequireDefault(require("./theme"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// For forward-compat until everything is upgraded.
var themeFnMap = {
  dark: function dark() {
    return {
      mode: 'dark'
    };
  },
  light: function light() {
    return {
      mode: 'light'
    };
  }
};
/**
 * __Atlaskit Theme Provider__
 *
 * The global theme provider is used to provide theme context to an application.
 * It should be used once in application code at the root, or as near to the root as possible,
 * to inject the global theme via React context.
 *
 * - [Examples](https://atlaskit.atlassian.com/examples/design-system/theme)
 *
 * @example
 * ```jsx
 * import { AtlaskitThemeProvider } from '@atlaskit/theme/components';
 *
 * const App = () => (
 *  <AtlaskitThemeProvider mode="dark">
 *   <App />
 *  </AtlaskitThemeProvider>
 * );
 * ```
 */

var AtlaskitThemeProvider = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? _constants.DEFAULT_THEME_MODE : _ref$mode,
      _ref$background = _ref.background,
      background = _ref$background === void 0 ? _colors.background : _ref$background,
      children = _ref.children;
  // background color is extracted here is it conditionally applied on the <body>
  var themeObj = {
    theme: {
      mode: mode
    }
  };
  var backgroundColor = background(themeObj);
  (0, _useThemeResetStyles.default)(backgroundColor);
  return /*#__PURE__*/_react.default.createElement(_theme.default.Provider, {
    value: themeFnMap[mode]
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(mode, "-").concat(_useThemeResetStyles.SELECTOR),
    style: {
      backgroundColor: backgroundColor
    }
  }, children));
});
var _default = AtlaskitThemeProvider;
exports.default = _default;