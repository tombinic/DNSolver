import { useEffect, useRef } from 'react';
import { heading, link, linkActive, linkHover, linkOutline, subtleHeading, subtleText, text } from '../../colors';
export var SELECTOR = 'old-ds-theme-mode';
/* eslint-disable @atlaskit/design-system/ensure-design-token-usage */

var baseResetStyles = [{
  mode: 'light'
}, {
  mode: 'dark'
}].map(function (theme) {
  return "\n  .".concat(theme.mode, "-").concat(SELECTOR, " {\n    color: ").concat(text({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a {\n    color: ").concat(link({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:hover {\n    color: ").concat(linkHover({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:active {\n    color: ").concat(linkActive({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:focus {\n    outlineColor: ").concat(linkOutline({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h1,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h2,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h3,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h4,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h5 {\n    color: ").concat(heading({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h6 {\n    color: ").concat(subtleHeading({
    theme: theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " small {\n    color: ").concat(subtleText({
    theme: theme
  }), ";\n  }");
}).join('\n');
/* eslint-enable @atlaskit/design-system/ensure-design-token-usage */

var getStylesheetResetCSS = function getStylesheetResetCSS(backgroundColor) {
  return "body { background: ".concat(backgroundColor, "; }");
};

var UNIQUE_INTERNAL_ID = 'ds--theme--ak-theme-provider';
var UNIQUE_BODY_BG_ID = 'ds--theme--ak-body-background';
/**
 * This hooks conditionally sets body styles based on the theme mode applied.
 *
 * @param backgroundColor The background color to be applied at the root level of the application
 */

var useThemeResetStyles = function useThemeResetStyles(backgroundColor) {
  var stylesheet = useRef(null);
  var bgColorNode = useRef(null);
  useEffect(function () {
    var hasNode = document.getElementById(UNIQUE_INTERNAL_ID); // Bail out if the AKThemeProvider has already set the body and there is already a theme stylesheet
    // Child nodes should not take precedence over a root node setting body bg

    if (hasNode) {
      return;
    }

    stylesheet.current = document.createElement('style');

    if (document && document.head) {
      stylesheet.current.id = UNIQUE_INTERNAL_ID; // prepend the theme reset styles

      document.head.prepend(stylesheet.current);
      stylesheet.current.innerHTML = baseResetStyles;
      return function () {
        // document && document.head is needed here most likely because of RTL or React DOM causing
        // document.head to be null if removed
        if (stylesheet.current && document && document.head) {
          document.head.removeChild(stylesheet.current);
          stylesheet.current = null;
        }
      };
    }
  }, []);
  useEffect(function () {
    var hasBodyNode = document.getElementById(UNIQUE_BODY_BG_ID);

    if (document && document.head) {
      if (!hasBodyNode) {
        // if there is no body element node already, set it up and append to document.head
        bgColorNode.current = document.createElement('style');
        bgColorNode.current.id = UNIQUE_BODY_BG_ID;
        document.head.append(bgColorNode.current);
      } // body element node already exists so just update the backgroundColor


      if (bgColorNode.current) {
        var cssBgColor = getStylesheetResetCSS(backgroundColor);
        bgColorNode.current.innerHTML = cssBgColor;
      }

      return function () {
        if (bgColorNode.current && document && document.head) {
          document.head.removeChild(bgColorNode.current);
          bgColorNode.current = null;
        }
      };
    }
  }, [backgroundColor]);
};

export default useThemeResetStyles;