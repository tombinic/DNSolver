import React from 'react';
import { CreateEventMap, CreateUIAnalyticsEvent } from '../types';
export interface WithAnalyticsEventsProps {
    /**
     * You should not be accessing this prop under any circumstances.
     * It is provided by `@atlaskit/analytics-next` and integrated in the component
     */
    createAnalyticsEvent?: CreateUIAnalyticsEvent;
    ref?: React.Ref<any>;
}
declare const withAnalyticsEvents: (createEventMap?: CreateEventMap) => <Props extends WithAnalyticsEventsProps, Component>(WrappedComponent: React.JSXElementConstructor<Props> & Component) => React.ForwardRefExoticComponent<React.PropsWithoutRef<Component extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T> ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U> ? U extends {
    propTypes: infer T_1;
    defaultProps: infer D;
} ? (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : U extends {
    propTypes: infer T_2;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : U extends {
    defaultProps: infer D_1;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Extract<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, Exclude<keyof Props, keyof WithAnalyticsEventsProps>>>> : never : Omit<Props, keyof WithAnalyticsEventsProps> : T extends {
    propTypes: infer T_1;
    defaultProps: infer D;
} ? (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : T extends {
    propTypes: infer T_2;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : T extends {
    defaultProps: infer D_1;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Extract<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, Exclude<keyof Props, keyof WithAnalyticsEventsProps>>>> : never : Omit<Props, keyof WithAnalyticsEventsProps> : Component extends {
    propTypes: infer T_1;
    defaultProps: infer D;
} ? (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) extends any ? string extends keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never) ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never : Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Exclude<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never, Extract<keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never), keyof D>>> & Partial<Pick<D, Exclude<keyof D, keyof (Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_1> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_1>, Exclude<import("prop-types").RequiredKeys<T_1>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_1> | Exclude<keyof T_1, import("prop-types").RequiredKeys<T_1>>>> : never)>>> : never : Component extends {
    propTypes: infer T_2;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps> extends never ? true : false) ? true : false) extends true ? import("prop-types").InferProps<T_2> : string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> & Pick<import("prop-types").InferProps<T_2>, Exclude<import("prop-types").RequiredKeys<T_2>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>> | Exclude<Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, { [K in keyof Omit<Props, keyof WithAnalyticsEventsProps>]: (boolean extends (Omit<Props, keyof WithAnalyticsEventsProps>[K] extends never ? true : false) ? true : false) extends true ? K : never; }[Exclude<keyof Props, keyof WithAnalyticsEventsProps>]>>> & Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, import("prop-types").RequiredKeys<T_2> | Exclude<keyof T_2, import("prop-types").RequiredKeys<T_2>>>> : never : Component extends {
    defaultProps: infer D_1;
} ? Omit<Props, keyof WithAnalyticsEventsProps> extends any ? string extends Exclude<keyof Props, keyof WithAnalyticsEventsProps> ? Omit<Props, keyof WithAnalyticsEventsProps> : Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Exclude<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>> & Partial<Pick<Omit<Props, keyof WithAnalyticsEventsProps>, Extract<Exclude<keyof Props, keyof WithAnalyticsEventsProps>, keyof D_1>>> & Partial<Pick<D_1, Exclude<keyof D_1, Exclude<keyof Props, keyof WithAnalyticsEventsProps>>>> : never : Omit<Props, keyof WithAnalyticsEventsProps>> & React.RefAttributes<any>>;
export default withAnalyticsEvents;
