import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { Component } from 'react';
import withAnalyticsEvents from '../hocs/withAnalyticsEvents';
import AnalyticsContext from './AnalyticsContext/LegacyAnalyticsContext';
// eslint-disable-next-line @repo/internal/react/no-class-components
export class BaseAnalyticsErrorBoundary extends Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "fireAnalytics", analyticsErrorPayload => {
      const {
        createAnalyticsEvent,
        channel,
        data
      } = this.props;
      createAnalyticsEvent({
        action: 'UnhandledError',
        eventType: 'ui',
        attributes: {
          browserInfo: window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : 'unknown',
          ...data,
          ...analyticsErrorPayload
        }
      }).fire(channel);
    });

    this.state = {
      hasError: false
    };
  }

  componentDidCatch(error, info) {
    const {
      onError
    } = this.props;
    const payload = {
      error,
      info
    };
    this.fireAnalytics(payload);
    onError && onError(error, info);
    this.setState({
      hasError: true
    });
  }

  render() {
    const {
      data,
      children,
      ErrorComponent
    } = this.props;
    const {
      hasError
    } = this.state;

    if (hasError && ErrorComponent) {
      return /*#__PURE__*/React.createElement(AnalyticsContext, {
        data: data
      }, /*#__PURE__*/React.createElement(ErrorComponent, null));
    }

    return /*#__PURE__*/React.createElement(AnalyticsContext, {
      data: data
    }, children);
  }

}
const AnalyticsErrorBoundary = withAnalyticsEvents()(BaseAnalyticsErrorBoundary);
export default AnalyticsErrorBoundary;