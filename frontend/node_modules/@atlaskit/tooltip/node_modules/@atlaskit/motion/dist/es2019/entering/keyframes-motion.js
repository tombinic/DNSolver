import React, { useEffect, useState } from 'react';
import { ClassNames, keyframes } from '@emotion/core';
import { prefersReducedMotion } from '../utils/accessibility';
import { largeDurationMs } from '../utils/durations';
import { useSetTimeout } from '../utils/timer-hooks';
import { useExitingPersistence } from './exiting-persistence';
import { useStaggeredEntrance } from './staggered-entrance';

/**
 * Used to multiply the initial duration for exiting motions.
 */
const EXITING_MOTION_MULTIPLIER = 0.5;
/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */

const EnteringMotion = ({
  children,
  animationTimingFunction,
  enteringAnimation,
  exitingAnimation,
  isPaused,
  onFinish: onFinishMotion,
  duration = largeDurationMs
}) => {
  const staggered = useStaggeredEntrance();
  const {
    isExiting,
    onFinish: onExitFinished,
    appear
  } = useExitingPersistence();
  const setTimeout = useSetTimeout();
  const paused = isPaused || !staggered.isReady;
  const delay = isExiting ? 0 : staggered.delay;
  const state = isExiting ? 'exiting' : 'entering';
  const [hasAnimationStyles, setHasAnimationStyles] = useState(appear);
  useEffect(() => {
    // Tracking this to prevent changing state on an unmounted component
    let isCancelled = false;

    if (paused) {
      return;
    } // On initial mount if elements aren't set to animate on appear, we return early and callback


    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    } // Elements may need animation styles back after initial mount (they could animate out)


    setHasAnimationStyles(true);
    setTimeout(() => {
      if (state === 'exiting') {
        onExitFinished && onExitFinished();
      }

      if (!isCancelled) {
        setHasAnimationStyles(false);
      }

      onFinishMotion && onFinishMotion(state);
    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);
    return () => {
      isCancelled = true;
    }; // We ignore this for onFinishMotion as consumers could potentially inline the function
    // which would then trigger this effect every re-render.
    // We want to make it easier for consumers so we go down this path unfortunately.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout]);
  return /*#__PURE__*/React.createElement(ClassNames, null, ({
    css
  }) => children({
    ref: staggered.ref,
    className: hasAnimationStyles ? css({
      animationName: `${keyframes(isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)}`,
      animationTimingFunction: animationTimingFunction(state),
      animationDelay: `${delay}ms`,
      animationFillMode: isExiting ? 'forwards' : 'backwards',
      animationDuration: `${isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration}ms`,
      animationPlayState: paused ? 'paused' : 'running',
      ...prefersReducedMotion()
    }) : ''
  }, state));
};

export default EnteringMotion;