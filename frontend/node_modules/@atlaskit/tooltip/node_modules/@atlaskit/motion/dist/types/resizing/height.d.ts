/// <reference types="react" />
import { CallbackRef } from '../utils/use-element-ref';
interface ResizingHeightOpts {
    /**
     * Duration as a `function`.
     * Will receive previous and next `height` and return the `duration`.
  
     * By default this will match the [ADG specifications](https://atlassian.design) for how long motion should take.
     * Design specifications are still a work in progress.
     */
    duration?: (prevHeight: number, nextHeight: number) => number;
    /**
     * Timing function as a `function`.
     * This is handy for changing the curve depending on the user interaction.
     * Does the user interact [directly or indirectly](/packages/helpers/motion/docs/variables)?
     * You'll want to use an appropriate curve.
     * Will receive previous and next `height`,
     * `duration`,
     * and return the [timing function](https://developer.mozilla.org/en-US/docs/Web/CSS/timing-function).
  
     * By default this will assume indirect motion using `easeInOut`.
     */
    timingFunction?: (prevHeight: number, nextHeight: number, duration: number) => string;
}
export declare const useResizingHeight: ({ duration: calcDuration, timingFunction: calcTimingFunction, }?: ResizingHeightOpts) => {
    ref: CallbackRef;
};
export declare const ResizingHeight: ({ children, ...props }: ResizingHeightOpts & {
    children: (opts: {
        ref: CallbackRef;
    }) => React.ReactNode;
}) => import("react").ReactNode;
declare const _default: (opts: ResizingHeightOpts) => void;
/**
 * This exists only to be able to extract opts.
 */
export default _default;
