import React, { Ref } from 'react';
import { ObjectInterpolation } from '@emotion/core';
import { MotionProps, Transition } from './types';
/**
 * These are props that motions should use as their external props for consumers.
 * See [FadeIn](packages/helpers/motion/src/entering/fade-in.tsx) for an example usage.
 */
export interface KeyframesMotionProps extends MotionProps<{
    className: string;
    ref: Ref<any>;
}> {
    /**
     * Can be used to pause the animation before it has finished.
     */
    isPaused?: boolean;
}
interface InternalKeyframesMotionProps extends KeyframesMotionProps {
    /**
     * Timing function to be used with the animation.
     * Receives the `state` and expects a `string` return value.
     * Useful if you want a different curve when entering vs. exiting.
     */
    animationTimingFunction: (state: Transition) => string;
    /**
     * CSS keyframes for the entering animation.
     */
    enteringAnimation: ObjectInterpolation<undefined>;
    /**
     * CSS keyframes for the exiting animation.
     */
    exitingAnimation?: ObjectInterpolation<undefined>;
    /**
     * Duration in `ms`.
     * How long the motion will take.
     */
    duration: number;
}
/**
 * This is the base INTERNAL component used for all other entering motions.
 * This does not need Javascript to execute on the client so it will run immediately
 * for any SSR rendered React apps before the JS has executed.
 */
declare const EnteringMotion: React.FC<InternalKeyframesMotionProps>;
export default EnteringMotion;
