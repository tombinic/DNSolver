import React, { ReactNode } from 'react';
export interface ExitingPersistenceProps {
    /**
     * Children can be any valid react node.
     * Either a single element,
     * multiple elements,
     * or multiple elements in an array.
     */
    children?: ReactNode;
    /**
     * When elements are exiting will exit all elements first and then mount the new ones.
     * Defaults to `false`.
     */
    exitThenEnter?: boolean;
    /**
     * When initially mounting if set to `true` all child motions will animate in.
     */
    appear?: boolean;
}
/**
 * Internal data passed to child motions.
 */
interface ExitingChildContext {
    /**
     * Will perform an exit animation instead of an enter animation.
     */
    isExiting: boolean;
    /**
     * Will be called when the animation has completed.
     */
    onFinish?: () => void;
    /**
     * Used to tell the child motions to animate in when initially mounting.
     */
    appear: boolean;
}
declare const ExitingPersistence: React.FC<ExitingPersistenceProps>;
export declare const useExitingPersistence: () => ExitingChildContext;
export default ExitingPersistence;
