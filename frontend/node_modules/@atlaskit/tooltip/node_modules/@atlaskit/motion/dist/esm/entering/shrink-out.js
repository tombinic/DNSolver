import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { easeIn } from '../utils/curves';
import { smallDurationMs } from '../utils/durations';
import { useRequestAnimationFrame, useSetTimeout } from '../utils/timer-hooks';
import { useElementRef } from '../utils/use-element-ref';
import { useLayoutEffect } from '../utils/use-layout-effect';
import { useExitingPersistence } from './exiting-persistence';

var ShrinkOut = function ShrinkOut(_ref) {
  var children = _ref.children,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? smallDurationMs : _ref$duration,
      onFinish = _ref.onFinish;

  var _useElementRef = useElementRef(),
      _useElementRef2 = _slicedToArray(_useElementRef, 2),
      element = _useElementRef2[0],
      setElementRef = _useElementRef2[1];

  var exiting = useExitingPersistence();
  var requestAnimationFrame = useRequestAnimationFrame();
  var setTimeout = useSetTimeout();
  var direction = exiting.isExiting ? 'exiting' : 'entering';
  useLayoutEffect(function () {
    if (exiting.isExiting && element) {
      var newStyles = {
        // We fix both width and height because when changing box sizing to border-box.
        width: "".concat(element.offsetWidth, "px"),
        height: "".concat(element.offsetHeight, "px"),
        boxSizing: 'border-box',
        willChange: 'width,margin'
      };
      Object.assign(element.style, newStyles);
      requestAnimationFrame(function () {
        requestAnimationFrame(function () {
          var newStyles = {
            width: '0px',
            margin: '0px',
            // We animate margin down to zero so it doesn't take any space.
            transitionTimingFunction: easeIn,
            transitionDuration: "".concat(duration, "ms"),
            transitionProperty: 'width,margin'
          };
          Object.assign(element.style, newStyles);
          setTimeout(function () {
            exiting.onFinish && exiting.onFinish();
            onFinish && onFinish('exiting');
          }, duration);
        });
      });
    }
  });
  return children({
    ref: setElementRef
  }, direction);
};

export default ShrinkOut;