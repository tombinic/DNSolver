import React, { useMemo } from 'react';
import { Popper as ReactPopper } from 'react-popper';
export { placements } from '@popperjs/core'; // Export types from PopperJS / React Popper

const constantModifiers = [{
  name: 'flip',
  options: {
    flipVariations: false,
    padding: 5,
    boundary: 'clippingParents',
    rootBoundary: 'viewport'
  }
}, {
  name: 'preventOverflow',
  options: {
    padding: 5,
    rootBoundary: 'document'
  }
}];

function defaultChildrenFn() {
  return null;
}

const defaultOffset = [0, 8];
export function Popper({
  children = defaultChildrenFn,
  offset = defaultOffset,
  placement = 'bottom-start',
  referenceElement = undefined,
  modifiers,
  strategy = 'fixed'
}) {
  const [offsetX, offsetY] = offset;
  // Merge a new offset modifier only if new offset values passed in
  const internalModifiers = useMemo(() => {
    const offsetModifier = {
      name: 'offset',
      options: {
        offset: [offsetX, offsetY]
      }
    };
    return [...constantModifiers, offsetModifier];
  }, [offsetX, offsetY]); // Merge custom props and memoize

  const mergedModifiers = useMemo(() => {
    if (modifiers == null) {
      return internalModifiers;
    }

    return [...internalModifiers, ...modifiers];
  }, [internalModifiers, modifiers]);
  return /*#__PURE__*/React.createElement(ReactPopper, {
    modifiers: mergedModifiers,
    placement: placement,
    strategy: strategy,
    referenceElement: referenceElement
  }, children);
}