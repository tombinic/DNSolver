{"ast":null,"code":"/**\r\n * Fuse.js v6.5.3 - Lightweight fuzzy-search (http://fusejs.io)\r\n *\r\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\r\n * All Rights Reserved. Apache Software License 2.0\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n */\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nconst INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n    let totalWeight = 0;\n    keys.forEach(key => {\n      let obj = createKey(key);\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n\n      this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(key => {\n      key.weight /= totalWeight;\n    });\n  }\n\n  get(keyId) {\n    return this._keyMap[keyId];\n  }\n\n  keys() {\n    return this._keys;\n  }\n\n  toJSON() {\n    return JSON.stringify(this._keys);\n  }\n\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return {\n    path,\n    id,\n    weight,\n    src\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\n};\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\nvar Config = { ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm() {\n  let weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  let mantissa = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      } // Default function is 1/sqrt(x), weight makes that variable\n\n\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight); // In place of `toFixed(mantissa)`, for faster computation\n\n      const n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n\n    clear() {\n      cache.clear();\n    }\n\n  };\n}\n\nclass FuseIndex {\n  constructor() {\n    let {\n      getFn = Config.getFn,\n      fieldNormWeight = Config.fieldNormWeight\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  setSources() {\n    let docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.docs = docs;\n  }\n\n  setIndexRecords() {\n    let records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.records = records;\n  }\n\n  setKeys() {\n    let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return;\n    }\n\n    this.isCreated = true; // List is Array<String>\n\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  } // Adds a doc to the end of the index\n\n\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  } // Removes the doc at the specified index of the index\n\n\n  removeAt(idx) {\n    this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]];\n  }\n\n  size() {\n    return this.records.length;\n  }\n\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return;\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n    this.records.push(record);\n  }\n\n  _addObject(doc, docIndex) {\n    let record = {\n      i: docIndex,\n      $: {}\n    }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{\n          nestedArrIndex: -1,\n          value\n        }];\n\n        while (stack.length) {\n          const {\n            nestedArrIndex,\n            value\n          } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue;\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n        record.$[keyIndex] = subRecord;\n      }\n    });\n    this.records.push(record);\n  }\n\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    };\n  }\n\n}\n\nfunction createIndex(keys, docs) {\n  let {\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const myIndex = new FuseIndex({\n    getFn,\n    fieldNormWeight\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data) {\n  let {\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    keys,\n    records\n  } = data;\n  const myIndex = new FuseIndex({\n    getFn,\n    fieldNormWeight\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore$1(pattern) {\n  let {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices() {\n  let matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nconst MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet) {\n  let {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  const patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  const textLen = text.length; // Handle the case when location > text.length\n\n  const expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  let currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  let bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  const computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  const matchMask = computeMatches ? Array(textLen) : [];\n  let index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n  const mask = 1 << patternLen - 1;\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    let bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nclass BitapSearch {\n  constructor(pattern) {\n    let {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const {\n      isCaseSensitive,\n      includeMatches\n    } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    } // Exact match\n\n\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result;\n    } // Otherwise, use Bitap algorithm\n\n\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n    this.chunks.forEach(_ref => {\n      let {\n        pattern,\n        alphabet,\n        startIndex\n      } = _ref;\n      const {\n        isMatch,\n        score,\n        indices\n      } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result;\n  }\n\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex);\n  }\n\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex);\n  }\n\n  search() {}\n\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'exact';\n  }\n\n  static get multiRegex() {\n    return /^=\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^=(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text === this.pattern;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !fire\n\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)$/;\n  }\n\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: ^file\n\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !^fire\n\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: .file$\n\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    };\n  }\n\n} // Token: !.file$\n\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(pattern) {\n    let {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n\n  static get type() {\n    return 'fuzzy';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)$/;\n  }\n\n  search(text) {\n    return this._bitapSearch.searchIn(text);\n  }\n\n} // Token: 'file\n\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'include';\n  }\n\n  static get multiRegex() {\n    return /^'\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^'(.*)$/;\n  }\n\n  search(text) {\n    let location = 0;\n    let index;\n    const indices = [];\n    const patternLen = this.pattern.length; // Get all exact matches\n\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    };\n  }\n\n} // ❗Order is important. DO NOT CHANGE.\n\n\nconst searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nconst searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(item => {\n    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());\n    let results = [];\n\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      let found = false;\n      let idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\r\n * Command-like searching\r\n * ======================\r\n *\r\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\r\n * search in a given text.\r\n *\r\n * Search syntax:\r\n *\r\n * | Token       | Match type                 | Description                            |\r\n * | ----------- | -------------------------- | -------------------------------------- |\r\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\r\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\r\n * | `'python`   | include-match              | Items that include `python`            |\r\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\r\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\r\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\r\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\r\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\r\n *\r\n * A single pipe character acts as an OR operator. For example, the following\r\n * query matches entries that start with `core` and end with either`go`, `rb`,\r\n * or`py`.\r\n *\r\n * ```\r\n * ^core go$ | rb$ | py$\r\n * ```\r\n */\n\nclass ExtendedSearch {\n  constructor(pattern) {\n    let {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch;\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n\n    const {\n      includeMatches,\n      isCaseSensitive\n    } = this.options;\n    text = isCaseSensitive ? text : text.toLowerCase();\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0; // ORs\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i]; // Reset indices\n\n      allIndices.length = 0;\n      numMatches = 0; // ANDs\n\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const {\n          isMatch,\n          indices,\n          score\n        } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break;\n        }\n      } // OR condition, so if TRUE, return\n\n\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result;\n      }\n    } // Nothing was matched\n\n\n    return {\n      isMatch: false,\n      score: 1\n    };\n  }\n\n}\n\nconst registeredSearchers = [];\n\nfunction register() {\n  registeredSearchers.push(...arguments);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = query => !!query[KeyType.PATH];\n\nconst isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = query => ({\n  [LogicalOperator.AND]: Object.keys(query).map(key => ({\n    [key]: query[key]\n  }))\n}); // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options) {\n  let {\n    auto = true\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  const next = query => {\n    let keys = Object.keys(query);\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(key => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(item => {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n} // Practical scoring function\n\n\nfunction computeScore(results, _ref2) {\n  let {\n    ignoreFieldNorm = Config.ignoreFieldNorm\n  } = _ref2;\n  results.forEach(result => {\n    let totalScore = 1;\n    result.matches.forEach(_ref3 => {\n      let {\n        key,\n        norm,\n        score\n      } = _ref3;\n      const weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(match => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    const {\n      indices,\n      value\n    } = match;\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs) {\n  let {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(result => {\n    const {\n      idx\n    } = result;\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(transformer => {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nclass Fuse {\n  constructor(docs) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let index = arguments.length > 2 ? arguments[2] : undefined;\n    this.options = { ...Config,\n      ...options\n    };\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE);\n    }\n\n    this._myIndex = index || createIndex(this.options.keys, this._docs, {\n      getFn: this.options.getFn,\n      fieldNormWeight: this.options.fieldNormWeight\n    });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return;\n    }\n\n    this._docs.push(doc);\n\n    this._myIndex.add(doc);\n  }\n\n  remove() {\n    let predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => false;\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n        results.push(doc);\n      }\n    }\n\n    return results;\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex;\n  }\n\n  search(query) {\n    let {\n      limit = -1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n    computeScore(results, {\n      ignoreFieldNorm\n    });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    });\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      records\n    } = this._myIndex;\n    const results = []; // Iterate over every string in the index\n\n    records.forEach(_ref4 => {\n      let {\n        v: text,\n        i: idx,\n        n: norm\n      } = _ref4;\n\n      if (!isDefined(text)) {\n        return;\n      }\n\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{\n            score,\n            value: text,\n            norm,\n            indices\n          }]\n        });\n      }\n    });\n    return results;\n  }\n\n  _searchLogical(query) {\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const {\n          keyId,\n          searcher\n        } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [{\n            idx,\n            item,\n            matches\n          }];\n        }\n\n        return [];\n      }\n\n      const res = [];\n\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return [];\n        }\n      }\n\n      return res;\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n    records.forEach(_ref5 => {\n      let {\n        $: item,\n        i: idx\n      } = _ref5;\n\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = {\n              idx,\n              item,\n              matches: []\n            };\n            results.push(resultMap[idx]);\n          }\n\n          expResults.forEach(_ref6 => {\n            let {\n              matches\n            } = _ref6;\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n    return results;\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const results = []; // List is Array<Object>\n\n    records.forEach(_ref7 => {\n      let {\n        $: item,\n        i: idx\n      } = _ref7;\n\n      if (!isDefined(item)) {\n        return;\n      }\n\n      let matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      keys.forEach((key, keyIndex) => {\n        matches.push(...this._findMatches({\n          key,\n          value: item[keyIndex],\n          searcher\n        }));\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n    return results;\n  }\n\n  _findMatches(_ref8) {\n    let {\n      key,\n      value,\n      searcher\n    } = _ref8;\n\n    if (!isDefined(value)) {\n      return [];\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(_ref9 => {\n        let {\n          v: text,\n          i: idx,\n          n: norm\n        } = _ref9;\n\n        if (!isDefined(text)) {\n          return;\n        }\n\n        const {\n          isMatch,\n          score,\n          indices\n        } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const {\n        v: text,\n        n: norm\n      } = value;\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({\n          score,\n          key,\n          value: text,\n          norm,\n          indices\n        });\n      }\n    }\n\n    return matches;\n  }\n\n}\n\nFuse.version = '6.5.3';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport { Fuse as default };","map":{"version":3,"sources":["C:/Users/nicol/Documents/GitHub/Telematica/frontend/node_modules/fuse.js/dist/fuse.esm.js"],"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","constructor","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","get","keyId","toJSON","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","fieldNormWeight","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","parseIndex","data","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","ExactMatch","type","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","MultiMatchSet","Set","ExtendedSearch","condition","_","numMatches","qLen","pLen","registeredSearchers","register","createSearcher","searcherClass","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","config","default"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAO,CAACC,KAAK,CAACF,OAAP,GACHG,MAAM,CAACF,KAAD,CAAN,KAAkB,gBADf,GAEHC,KAAK,CAACF,OAAN,CAAcC,KAAd,CAFJ;AAGD,C,CAED;;;AACA,MAAMG,QAAQ,GAAG,IAAI,CAArB;;AACA,SAASC,YAAT,CAAsBJ,KAAtB,EAA6B;AAC3B;AACA,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAIK,MAAM,GAAGL,KAAK,GAAG,EAArB;AACA,SAAOK,MAAM,IAAI,GAAV,IAAiB,IAAIL,KAAJ,IAAa,CAACG,QAA/B,GAA0C,IAA1C,GAAiDE,MAAxD;AACD;;AAED,SAASC,QAAT,CAAkBN,KAAlB,EAAyB;AACvB,SAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBI,YAAY,CAACJ,KAAD,CAAxC;AACD;;AAED,SAASO,QAAT,CAAkBP,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AAED,SAASQ,QAAT,CAAkBR,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASS,SAAT,CAAmBT,KAAnB,EAA0B;AACxB,SACEA,KAAK,KAAK,IAAV,IACAA,KAAK,KAAK,KADV,IAECU,YAAY,CAACV,KAAD,CAAZ,IAAuBE,MAAM,CAACF,KAAD,CAAN,IAAiB,kBAH3C;AAKD;;AAED,SAASW,QAAT,CAAkBX,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASU,YAAT,CAAsBV,KAAtB,EAA6B;AAC3B,SAAOW,QAAQ,CAACX,KAAD,CAAR,IAAmBA,KAAK,KAAK,IAApC;AACD;;AAED,SAASY,SAAT,CAAmBZ,KAAnB,EAA0B;AACxB,SAAOA,KAAK,KAAKa,SAAV,IAAuBb,KAAK,KAAK,IAAxC;AACD;;AAED,SAASc,OAAT,CAAiBd,KAAjB,EAAwB;AACtB,SAAO,CAACA,KAAK,CAACe,IAAN,GAAaC,MAArB;AACD,C,CAED;AACA;;;AACA,SAASd,MAAT,CAAgBF,KAAhB,EAAuB;AACrB,SAAOA,KAAK,IAAI,IAAT,GACHA,KAAK,KAAKa,SAAV,GACE,oBADF,GAEE,eAHC,GAIHI,MAAM,CAACC,SAAP,CAAiBZ,QAAjB,CAA0Ba,IAA1B,CAA+BnB,KAA/B,CAJJ;AAKD;;AAED,MAAMoB,2BAA2B,GAAG,kCAApC;AAEA,MAAMC,oBAAoB,GAAG,wBAA7B;;AAEA,MAAMC,oCAAoC,GAAIC,GAAD,IAC1C,yBAAwBA,GAAI,EAD/B;;AAGA,MAAMC,wBAAwB,GAAIC,GAAD,IAC9B,iCAAgCA,GAAI,GADvC;;AAGA,MAAMC,oBAAoB,GAAIC,IAAD,IAAW,WAAUA,IAAK,kBAAvD;;AAEA,MAAMC,wBAAwB,GAAIL,GAAD,IAC9B,6BAA4BA,GAAI,8BADnC;;AAGA,MAAMM,MAAM,GAAGZ,MAAM,CAACC,SAAP,CAAiBY,cAAhC;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AAEA,QAAIC,WAAW,GAAG,CAAlB;AAEAH,IAAAA,IAAI,CAACI,OAAL,CAAcd,GAAD,IAAS;AACpB,UAAIe,GAAG,GAAGC,SAAS,CAAChB,GAAD,CAAnB;AAEAa,MAAAA,WAAW,IAAIE,GAAG,CAACE,MAAnB;;AAEA,WAAKN,KAAL,CAAWO,IAAX,CAAgBH,GAAhB;;AACA,WAAKH,OAAL,CAAaG,GAAG,CAACI,EAAjB,IAAuBJ,GAAvB;AAEAF,MAAAA,WAAW,IAAIE,GAAG,CAACE,MAAnB;AACD,KATD,EANgB,CAiBhB;;AACA,SAAKN,KAAL,CAAWG,OAAX,CAAoBd,GAAD,IAAS;AAC1BA,MAAAA,GAAG,CAACiB,MAAJ,IAAcJ,WAAd;AACD,KAFD;AAGD;;AACDO,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACT,WAAO,KAAKT,OAAL,CAAaS,KAAb,CAAP;AACD;;AACDX,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKC,KAAZ;AACD;;AACDW,EAAAA,MAAM,GAAG;AACP,WAAOC,IAAI,CAACC,SAAL,CAAe,KAAKb,KAApB,CAAP;AACD;;AA/BY;;AAkCf,SAASK,SAAT,CAAmBhB,GAAnB,EAAwB;AACtB,MAAIyB,IAAI,GAAG,IAAX;AACA,MAAIN,EAAE,GAAG,IAAT;AACA,MAAIO,GAAG,GAAG,IAAV;AACA,MAAIT,MAAM,GAAG,CAAb;;AAEA,MAAIjC,QAAQ,CAACgB,GAAD,CAAR,IAAiBxB,OAAO,CAACwB,GAAD,CAA5B,EAAmC;AACjC0B,IAAAA,GAAG,GAAG1B,GAAN;AACAyB,IAAAA,IAAI,GAAGE,aAAa,CAAC3B,GAAD,CAApB;AACAmB,IAAAA,EAAE,GAAGS,WAAW,CAAC5B,GAAD,CAAhB;AACD,GAJD,MAIO;AACL,QAAI,CAACM,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,MAAjB,CAAL,EAA+B;AAC7B,YAAM,IAAI6B,KAAJ,CAAU1B,oBAAoB,CAAC,MAAD,CAA9B,CAAN;AACD;;AAED,UAAMC,IAAI,GAAGJ,GAAG,CAACI,IAAjB;AACAsB,IAAAA,GAAG,GAAGtB,IAAN;;AAEA,QAAIE,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,QAAjB,CAAJ,EAAgC;AAC9BiB,MAAAA,MAAM,GAAGjB,GAAG,CAACiB,MAAb;;AAEA,UAAIA,MAAM,IAAI,CAAd,EAAiB;AACf,cAAM,IAAIY,KAAJ,CAAUxB,wBAAwB,CAACD,IAAD,CAAlC,CAAN;AACD;AACF;;AAEDqB,IAAAA,IAAI,GAAGE,aAAa,CAACvB,IAAD,CAApB;AACAe,IAAAA,EAAE,GAAGS,WAAW,CAACxB,IAAD,CAAhB;AACD;;AAED,SAAO;AAAEqB,IAAAA,IAAF;AAAQN,IAAAA,EAAR;AAAYF,IAAAA,MAAZ;AAAoBS,IAAAA;AAApB,GAAP;AACD;;AAED,SAASC,aAAT,CAAuB3B,GAAvB,EAA4B;AAC1B,SAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAf,GAAqBA,GAAG,CAAC8B,KAAJ,CAAU,GAAV,CAA5B;AACD;;AAED,SAASF,WAAT,CAAqB5B,GAArB,EAA0B;AACxB,SAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAG,CAAC+B,IAAJ,CAAS,GAAT,CAAf,GAA+B/B,GAAtC;AACD;;AAED,SAASoB,GAAT,CAAaL,GAAb,EAAkBU,IAAlB,EAAwB;AACtB,MAAIO,IAAI,GAAG,EAAX;AACA,MAAIC,GAAG,GAAG,KAAV;;AAEA,QAAMC,OAAO,GAAG,CAACnB,GAAD,EAAMU,IAAN,EAAYU,KAAZ,KAAsB;AACpC,QAAI,CAAC9C,SAAS,CAAC0B,GAAD,CAAd,EAAqB;AACnB;AACD;;AACD,QAAI,CAACU,IAAI,CAACU,KAAD,CAAT,EAAkB;AAChB;AACAH,MAAAA,IAAI,CAACd,IAAL,CAAUH,GAAV;AACD,KAHD,MAGO;AACL,UAAIf,GAAG,GAAGyB,IAAI,CAACU,KAAD,CAAd;AAEA,YAAM1D,KAAK,GAAGsC,GAAG,CAACf,GAAD,CAAjB;;AAEA,UAAI,CAACX,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB;AACD,OAPI,CASL;AACA;;;AACA,UACE0D,KAAK,KAAKV,IAAI,CAAChC,MAAL,GAAc,CAAxB,KACCT,QAAQ,CAACP,KAAD,CAAR,IAAmBQ,QAAQ,CAACR,KAAD,CAA3B,IAAsCS,SAAS,CAACT,KAAD,CADhD,CADF,EAGE;AACAuD,QAAAA,IAAI,CAACd,IAAL,CAAUnC,QAAQ,CAACN,KAAD,CAAlB;AACD,OALD,MAKO,IAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AACzBwD,QAAAA,GAAG,GAAG,IAAN,CADyB,CAEzB;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG5D,KAAK,CAACgB,MAA5B,EAAoC2C,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnDF,UAAAA,OAAO,CAACzD,KAAK,CAAC2D,CAAD,CAAN,EAAWX,IAAX,EAAiBU,KAAK,GAAG,CAAzB,CAAP;AACD;AACF,OANM,MAMA,IAAIV,IAAI,CAAChC,MAAT,EAAiB;AACtB;AACAyC,QAAAA,OAAO,CAACzD,KAAD,EAAQgD,IAAR,EAAcU,KAAK,GAAG,CAAtB,CAAP;AACD;AACF;AACF,GAlCD,CAJsB,CAwCtB;;;AACAD,EAAAA,OAAO,CAACnB,GAAD,EAAM/B,QAAQ,CAACyC,IAAD,CAAR,GAAiBA,IAAI,CAACK,KAAL,CAAW,GAAX,CAAjB,GAAmCL,IAAzC,EAA+C,CAA/C,CAAP;AAEA,SAAOQ,GAAG,GAAGD,IAAH,GAAUA,IAAI,CAAC,CAAD,CAAxB;AACD;;AAED,MAAMM,YAAY,GAAG;AACnB;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,KAJG;AAKnB;AACA;AACAC,EAAAA,cAAc,EAAE,KAPG;AAQnB;AACAC,EAAAA,kBAAkB,EAAE;AATD,CAArB;AAYA,MAAMC,YAAY,GAAG;AACnB;AACA;AACAC,EAAAA,eAAe,EAAE,KAHE;AAInB;AACAC,EAAAA,YAAY,EAAE,KALK;AAMnB;AACAlC,EAAAA,IAAI,EAAE,EAPa;AAQnB;AACAmC,EAAAA,UAAU,EAAE,IATO;AAUnB;AACAC,EAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KACND,CAAC,CAACE,KAAF,KAAYD,CAAC,CAACC,KAAd,GAAuBF,CAAC,CAACG,GAAF,GAAQF,CAAC,CAACE,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAA5C,GAAiDH,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAAC,CAArB,GAAyB;AAZzD,CAArB;AAeA,MAAME,YAAY,GAAG;AACnB;AACAC,EAAAA,QAAQ,EAAE,CAFS;AAGnB;AACA;AACAC,EAAAA,SAAS,EAAE,GALQ;AAMnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE;AAXS,CAArB;AAcA,MAAMC,eAAe,GAAG;AACtB;AACAC,EAAAA,iBAAiB,EAAE,KAFG;AAGtB;AACA;AACAC,EAAAA,KAAK,EAAErC,GALe;AAMtB;AACA;AACA;AACAsC,EAAAA,cAAc,EAAE,KATM;AAUtB;AACA;AACA;AACAC,EAAAA,eAAe,EAAE,KAbK;AActB;AACAC,EAAAA,eAAe,EAAE;AAfK,CAAxB;AAkBA,IAAIC,MAAM,GAAG,EACX,GAAGnB,YADQ;AAEX,KAAGJ,YAFQ;AAGX,KAAGa,YAHQ;AAIX,KAAGI;AAJQ,CAAb;AAOA,MAAMO,KAAK,GAAG,QAAd,C,CAEA;AACA;;AACA,SAASC,IAAT,GAAwC;AAAA,MAA1B9C,MAA0B,uEAAjB,CAAiB;AAAA,MAAd+C,QAAc,uEAAH,CAAG;AACtC,QAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,QAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,QAAb,CAAV;AAEA,SAAO;AACL5C,IAAAA,GAAG,CAAC3C,KAAD,EAAQ;AACT,YAAM6F,SAAS,GAAG7F,KAAK,CAAC8F,KAAN,CAAYT,KAAZ,EAAmBrE,MAArC;;AAEA,UAAIwE,KAAK,CAACO,GAAN,CAAUF,SAAV,CAAJ,EAA0B;AACxB,eAAOL,KAAK,CAAC7C,GAAN,CAAUkD,SAAV,CAAP;AACD,OALQ,CAOT;;;AACA,YAAMP,IAAI,GAAG,IAAIK,IAAI,CAACC,GAAL,CAASC,SAAT,EAAoB,MAAMrD,MAA1B,CAAjB,CARS,CAUT;;AACA,YAAMwD,CAAC,GAAGC,UAAU,CAACN,IAAI,CAACO,KAAL,CAAWZ,IAAI,GAAGI,CAAlB,IAAuBA,CAAxB,CAApB;AAEAF,MAAAA,KAAK,CAACW,GAAN,CAAUN,SAAV,EAAqBG,CAArB;AAEA,aAAOA,CAAP;AACD,KAjBI;;AAkBLI,IAAAA,KAAK,GAAG;AACNZ,MAAAA,KAAK,CAACY,KAAN;AACD;;AApBI,GAAP;AAsBD;;AAED,MAAMC,SAAN,CAAgB;AACdrE,EAAAA,WAAW,GAGH;AAAA,QAHI;AACVgD,MAAAA,KAAK,GAAGI,MAAM,CAACJ,KADL;AAEVG,MAAAA,eAAe,GAAGC,MAAM,CAACD;AAFf,KAGJ,uEAAJ,EAAI;AACN,SAAKG,IAAL,GAAYA,IAAI,CAACH,eAAD,EAAkB,CAAlB,CAAhB;AACA,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKsB,SAAL,GAAiB,KAAjB;AAEA,SAAKC,eAAL;AACD;;AACDC,EAAAA,UAAU,GAAY;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AACDF,EAAAA,eAAe,GAAe;AAAA,QAAdG,OAAc,uEAAJ,EAAI;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACDC,EAAAA,OAAO,GAAY;AAAA,QAAX1E,IAAW,uEAAJ,EAAI;AACjB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAK2E,QAAL,GAAgB,EAAhB;AACA3E,IAAAA,IAAI,CAACI,OAAL,CAAa,CAACd,GAAD,EAAMkD,GAAN,KAAc;AACzB,WAAKmC,QAAL,CAAcrF,GAAG,CAACmB,EAAlB,IAAwB+B,GAAxB;AACD,KAFD;AAGD;;AACDoC,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKP,SAAL,IAAkB,CAAC,KAAKG,IAAL,CAAUzF,MAAjC,EAAyC;AACvC;AACD;;AAED,SAAKsF,SAAL,GAAiB,IAAjB,CALO,CAOP;;AACA,QAAI/F,QAAQ,CAAC,KAAKkG,IAAL,CAAU,CAAV,CAAD,CAAZ,EAA4B;AAC1B,WAAKA,IAAL,CAAUpE,OAAV,CAAkB,CAACyE,GAAD,EAAMC,QAAN,KAAmB;AACnC,aAAKC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB;AACD,OAFD;AAGD,KAJD,MAIO;AACL;AACA,WAAKN,IAAL,CAAUpE,OAAV,CAAkB,CAACyE,GAAD,EAAMC,QAAN,KAAmB;AACnC,aAAKE,UAAL,CAAgBH,GAAhB,EAAqBC,QAArB;AACD,OAFD;AAGD;;AAED,SAAKzB,IAAL,CAAUc,KAAV;AACD,GA5Ca,CA6Cd;;;AACAc,EAAAA,GAAG,CAACJ,GAAD,EAAM;AACP,UAAMrC,GAAG,GAAG,KAAK0C,IAAL,EAAZ;;AAEA,QAAI5G,QAAQ,CAACuG,GAAD,CAAZ,EAAmB;AACjB,WAAKE,UAAL,CAAgBF,GAAhB,EAAqBrC,GAArB;AACD,KAFD,MAEO;AACL,WAAKwC,UAAL,CAAgBH,GAAhB,EAAqBrC,GAArB;AACD;AACF,GAtDa,CAuDd;;;AACA2C,EAAAA,QAAQ,CAAC3C,GAAD,EAAM;AACZ,SAAKiC,OAAL,CAAaW,MAAb,CAAoB5C,GAApB,EAAyB,CAAzB,EADY,CAGZ;;AACA,SAAK,IAAId,CAAC,GAAGc,GAAR,EAAab,GAAG,GAAG,KAAKuD,IAAL,EAAxB,EAAqCxD,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,WAAK+C,OAAL,CAAa/C,CAAb,EAAgBA,CAAhB,IAAqB,CAArB;AACD;AACF;;AACD2D,EAAAA,sBAAsB,CAACC,IAAD,EAAO3E,KAAP,EAAc;AAClC,WAAO2E,IAAI,CAAC,KAAKX,QAAL,CAAchE,KAAd,CAAD,CAAX;AACD;;AACDuE,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKT,OAAL,CAAa1F,MAApB;AACD;;AACDgG,EAAAA,UAAU,CAACF,GAAD,EAAMC,QAAN,EAAgB;AACxB,QAAI,CAACnG,SAAS,CAACkG,GAAD,CAAV,IAAmBhG,OAAO,CAACgG,GAAD,CAA9B,EAAqC;AACnC;AACD;;AAED,QAAIU,MAAM,GAAG;AACXC,MAAAA,CAAC,EAAEX,GADQ;AAEXnD,MAAAA,CAAC,EAAEoD,QAFQ;AAGXf,MAAAA,CAAC,EAAE,KAAKV,IAAL,CAAU3C,GAAV,CAAcmE,GAAd;AAHQ,KAAb;AAMA,SAAKJ,OAAL,CAAajE,IAAb,CAAkB+E,MAAlB;AACD;;AACDP,EAAAA,UAAU,CAACH,GAAD,EAAMC,QAAN,EAAgB;AACxB,QAAIS,MAAM,GAAG;AAAE7D,MAAAA,CAAC,EAAEoD,QAAL;AAAeW,MAAAA,CAAC,EAAE;AAAlB,KAAb,CADwB,CAGxB;;AACA,SAAKzF,IAAL,CAAUI,OAAV,CAAkB,CAACd,GAAD,EAAMoG,QAAN,KAAmB;AACnC;AACA,UAAI3H,KAAK,GAAG,KAAKgF,KAAL,CAAW8B,GAAX,EAAgBvF,GAAG,CAACyB,IAApB,CAAZ;;AAEA,UAAI,CAACpC,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB;AACD;;AAED,UAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,YAAI4H,UAAU,GAAG,EAAjB;AACA,cAAMC,KAAK,GAAG,CAAC;AAAEC,UAAAA,cAAc,EAAE,CAAC,CAAnB;AAAsB9H,UAAAA;AAAtB,SAAD,CAAd;;AAEA,eAAO6H,KAAK,CAAC7G,MAAb,EAAqB;AACnB,gBAAM;AAAE8G,YAAAA,cAAF;AAAkB9H,YAAAA;AAAlB,cAA4B6H,KAAK,CAACE,GAAN,EAAlC;;AAEA,cAAI,CAACnH,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB;AACD;;AAED,cAAIO,QAAQ,CAACP,KAAD,CAAR,IAAmB,CAACc,OAAO,CAACd,KAAD,CAA/B,EAAwC;AACtC,gBAAIgI,SAAS,GAAG;AACdP,cAAAA,CAAC,EAAEzH,KADW;AAEd2D,cAAAA,CAAC,EAAEmE,cAFW;AAGd9B,cAAAA,CAAC,EAAE,KAAKV,IAAL,CAAU3C,GAAV,CAAc3C,KAAd;AAHW,aAAhB;AAMA4H,YAAAA,UAAU,CAACnF,IAAX,CAAgBuF,SAAhB;AACD,WARD,MAQO,IAAIjI,OAAO,CAACC,KAAD,CAAX,EAAoB;AACzBA,YAAAA,KAAK,CAACqC,OAAN,CAAc,CAACkF,IAAD,EAAOU,CAAP,KAAa;AACzBJ,cAAAA,KAAK,CAACpF,IAAN,CAAW;AACTqF,gBAAAA,cAAc,EAAEG,CADP;AAETjI,gBAAAA,KAAK,EAAEuH;AAFE,eAAX;AAID,aALD;AAMD,WAPM,MAOA;AACR;;AACDC,QAAAA,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBC,UAArB;AACD,OA7BD,MA6BO,IAAI,CAAC9G,OAAO,CAACd,KAAD,CAAZ,EAAqB;AAC1B,YAAIgI,SAAS,GAAG;AACdP,UAAAA,CAAC,EAAEzH,KADW;AAEdgG,UAAAA,CAAC,EAAE,KAAKV,IAAL,CAAU3C,GAAV,CAAc3C,KAAd;AAFW,SAAhB;AAKAwH,QAAAA,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBK,SAArB;AACD;AACF,KA7CD;AA+CA,SAAKtB,OAAL,CAAajE,IAAb,CAAkB+E,MAAlB;AACD;;AACD3E,EAAAA,MAAM,GAAG;AACP,WAAO;AACLZ,MAAAA,IAAI,EAAE,KAAKA,IADN;AAELyE,MAAAA,OAAO,EAAE,KAAKA;AAFT,KAAP;AAID;;AA7Ia;;AAgJhB,SAASwB,WAAT,CACEjG,IADF,EAEEwE,IAFF,EAIE;AAAA,MADA;AAAEzB,IAAAA,KAAK,GAAGI,MAAM,CAACJ,KAAjB;AAAwBG,IAAAA,eAAe,GAAGC,MAAM,CAACD;AAAjD,GACA,uEADqE,EACrE;AACA,QAAMgD,OAAO,GAAG,IAAI9B,SAAJ,CAAc;AAAErB,IAAAA,KAAF;AAASG,IAAAA;AAAT,GAAd,CAAhB;AACAgD,EAAAA,OAAO,CAACxB,OAAR,CAAgB1E,IAAI,CAACmG,GAAL,CAAS7F,SAAT,CAAhB;AACA4F,EAAAA,OAAO,CAAC3B,UAAR,CAAmBC,IAAnB;AACA0B,EAAAA,OAAO,CAACtB,MAAR;AACA,SAAOsB,OAAP;AACD;;AAED,SAASE,UAAT,CACEC,IADF,EAGE;AAAA,MADA;AAAEtD,IAAAA,KAAK,GAAGI,MAAM,CAACJ,KAAjB;AAAwBG,IAAAA,eAAe,GAAGC,MAAM,CAACD;AAAjD,GACA,uEADqE,EACrE;AACA,QAAM;AAAElD,IAAAA,IAAF;AAAQyE,IAAAA;AAAR,MAAoB4B,IAA1B;AACA,QAAMH,OAAO,GAAG,IAAI9B,SAAJ,CAAc;AAAErB,IAAAA,KAAF;AAASG,IAAAA;AAAT,GAAd,CAAhB;AACAgD,EAAAA,OAAO,CAACxB,OAAR,CAAgB1E,IAAhB;AACAkG,EAAAA,OAAO,CAAC5B,eAAR,CAAwBG,OAAxB;AACA,SAAOyB,OAAP;AACD;;AAED,SAASI,cAAT,CACEC,OADF,EASE;AAAA,MAPA;AACEC,IAAAA,MAAM,GAAG,CADX;AAEEC,IAAAA,eAAe,GAAG,CAFpB;AAGEC,IAAAA,gBAAgB,GAAG,CAHrB;AAIE9D,IAAAA,QAAQ,GAAGO,MAAM,CAACP,QAJpB;AAKEI,IAAAA,cAAc,GAAGG,MAAM,CAACH;AAL1B,GAOA,uEADI,EACJ;AACA,QAAM2D,QAAQ,GAAGH,MAAM,GAAGD,OAAO,CAACxH,MAAlC;;AAEA,MAAIiE,cAAJ,EAAoB;AAClB,WAAO2D,QAAP;AACD;;AAED,QAAMC,SAAS,GAAGlD,IAAI,CAACmD,GAAL,CAASH,gBAAgB,GAAGD,eAA5B,CAAlB;;AAEA,MAAI,CAAC7D,QAAL,EAAe;AACb;AACA,WAAOgE,SAAS,GAAG,GAAH,GAASD,QAAzB;AACD;;AAED,SAAOA,QAAQ,GAAGC,SAAS,GAAGhE,QAA9B;AACD;;AAED,SAASkE,oBAAT,GAGE;AAAA,MAFAC,SAEA,uEAFY,EAEZ;AAAA,MADAhF,kBACA,uEADqBoB,MAAM,CAACpB,kBAC5B;AACA,MAAIiF,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIxF,CAAC,GAAG,CAAR;;AAEA,OAAK,IAAIC,GAAG,GAAGoF,SAAS,CAAChI,MAAzB,EAAiC2C,CAAC,GAAGC,GAArC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChD,QAAImC,KAAK,GAAGkD,SAAS,CAACrF,CAAD,CAArB;;AACA,QAAImC,KAAK,IAAIoD,KAAK,KAAK,CAAC,CAAxB,EAA2B;AACzBA,MAAAA,KAAK,GAAGvF,CAAR;AACD,KAFD,MAEO,IAAI,CAACmC,KAAD,IAAUoD,KAAK,KAAK,CAAC,CAAzB,EAA4B;AACjCC,MAAAA,GAAG,GAAGxF,CAAC,GAAG,CAAV;;AACA,UAAIwF,GAAG,GAAGD,KAAN,GAAc,CAAd,IAAmBlF,kBAAvB,EAA2C;AACzCiF,QAAAA,OAAO,CAACxG,IAAR,CAAa,CAACyG,KAAD,EAAQC,GAAR,CAAb;AACD;;AACDD,MAAAA,KAAK,GAAG,CAAC,CAAT;AACD;AACF,GAjBD,CAmBA;;;AACA,MAAIF,SAAS,CAACrF,CAAC,GAAG,CAAL,CAAT,IAAoBA,CAAC,GAAGuF,KAAJ,IAAalF,kBAArC,EAAyD;AACvDiF,IAAAA,OAAO,CAACxG,IAAR,CAAa,CAACyG,KAAD,EAAQvF,CAAC,GAAG,CAAZ,CAAb;AACD;;AAED,SAAOsF,OAAP;AACD,C,CAED;;;AACA,MAAMG,QAAQ,GAAG,EAAjB;;AAEA,SAASC,MAAT,CACEC,IADF,EAEEd,OAFF,EAGEe,eAHF,EAaE;AAAA,MATA;AACE5E,IAAAA,QAAQ,GAAGS,MAAM,CAACT,QADpB;AAEEE,IAAAA,QAAQ,GAAGO,MAAM,CAACP,QAFpB;AAGED,IAAAA,SAAS,GAAGQ,MAAM,CAACR,SAHrB;AAIEb,IAAAA,cAAc,GAAGqB,MAAM,CAACrB,cAJ1B;AAKEC,IAAAA,kBAAkB,GAAGoB,MAAM,CAACpB,kBAL9B;AAMEF,IAAAA,cAAc,GAAGsB,MAAM,CAACtB,cAN1B;AAOEmB,IAAAA,cAAc,GAAGG,MAAM,CAACH;AAP1B,GASA,uEADI,EACJ;;AACA,MAAIuD,OAAO,CAACxH,MAAR,GAAiBoI,QAArB,EAA+B;AAC7B,UAAM,IAAIhG,KAAJ,CAAU5B,wBAAwB,CAAC4H,QAAD,CAAlC,CAAN;AACD;;AAED,QAAMI,UAAU,GAAGhB,OAAO,CAACxH,MAA3B,CALA,CAMA;;AACA,QAAMyI,OAAO,GAAGH,IAAI,CAACtI,MAArB,CAPA,CAQA;;AACA,QAAM2H,gBAAgB,GAAGhD,IAAI,CAAClE,GAAL,CAAS,CAAT,EAAYkE,IAAI,CAAC+D,GAAL,CAAS/E,QAAT,EAAmB8E,OAAnB,CAAZ,CAAzB,CATA,CAUA;;AACA,MAAIE,gBAAgB,GAAG/E,SAAvB,CAXA,CAYA;;AACA,MAAIgF,YAAY,GAAGjB,gBAAnB,CAbA,CAeA;AACA;;AACA,QAAMkB,cAAc,GAAG7F,kBAAkB,GAAG,CAArB,IAA0BF,cAAjD,CAjBA,CAkBA;;AACA,QAAMgG,SAAS,GAAGD,cAAc,GAAG5J,KAAK,CAACwJ,OAAD,CAAR,GAAoB,EAApD;AAEA,MAAI/F,KAAJ,CArBA,CAuBA;;AACA,SAAO,CAACA,KAAK,GAAG4F,IAAI,CAACS,OAAL,CAAavB,OAAb,EAAsBoB,YAAtB,CAAT,IAAgD,CAAC,CAAxD,EAA2D;AACzD,QAAIpF,KAAK,GAAG+D,cAAc,CAACC,OAAD,EAAU;AAClCE,MAAAA,eAAe,EAAEhF,KADiB;AAElCiF,MAAAA,gBAFkC;AAGlC9D,MAAAA,QAHkC;AAIlCI,MAAAA;AAJkC,KAAV,CAA1B;AAOA0E,IAAAA,gBAAgB,GAAGhE,IAAI,CAAC+D,GAAL,CAASlF,KAAT,EAAgBmF,gBAAhB,CAAnB;AACAC,IAAAA,YAAY,GAAGlG,KAAK,GAAG8F,UAAvB;;AAEA,QAAIK,cAAJ,EAAoB;AAClB,UAAIlG,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAG6F,UAAX,EAAuB;AACrBM,QAAAA,SAAS,CAACpG,KAAK,GAAGC,CAAT,CAAT,GAAuB,CAAvB;AACAA,QAAAA,CAAC,IAAI,CAAL;AACD;AACF;AACF,GA1CD,CA4CA;;;AACAiG,EAAAA,YAAY,GAAG,CAAC,CAAhB;AAEA,MAAII,UAAU,GAAG,EAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,MAAM,GAAGV,UAAU,GAAGC,OAA1B;AAEA,QAAMU,IAAI,GAAG,KAAMX,UAAU,GAAG,CAAhC;;AAEA,OAAK,IAAI7F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6F,UAApB,EAAgC7F,CAAC,IAAI,CAArC,EAAwC;AACtC;AACA;AACA;AACA,QAAIyG,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAGH,MAAb;;AAEA,WAAOE,MAAM,GAAGC,MAAhB,EAAwB;AACtB,YAAM7F,KAAK,GAAG+D,cAAc,CAACC,OAAD,EAAU;AACpCC,QAAAA,MAAM,EAAE9E,CAD4B;AAEpC+E,QAAAA,eAAe,EAAEC,gBAAgB,GAAG0B,MAFA;AAGpC1B,QAAAA,gBAHoC;AAIpC9D,QAAAA,QAJoC;AAKpCI,QAAAA;AALoC,OAAV,CAA5B;;AAQA,UAAIT,KAAK,IAAImF,gBAAb,EAA+B;AAC7BS,QAAAA,MAAM,GAAGC,MAAT;AACD,OAFD,MAEO;AACLH,QAAAA,MAAM,GAAGG,MAAT;AACD;;AAEDA,MAAAA,MAAM,GAAG1E,IAAI,CAAC2E,KAAL,CAAW,CAACJ,MAAM,GAAGE,MAAV,IAAoB,CAApB,GAAwBA,MAAnC,CAAT;AACD,KAvBqC,CAyBtC;;;AACAF,IAAAA,MAAM,GAAGG,MAAT;AAEA,QAAInB,KAAK,GAAGvD,IAAI,CAAClE,GAAL,CAAS,CAAT,EAAYkH,gBAAgB,GAAG0B,MAAnB,GAA4B,CAAxC,CAAZ;AACA,QAAIE,MAAM,GAAGxG,cAAc,GACvB0F,OADuB,GAEvB9D,IAAI,CAAC+D,GAAL,CAASf,gBAAgB,GAAG0B,MAA5B,EAAoCZ,OAApC,IAA+CD,UAFnD,CA7BsC,CAiCtC;;AACA,QAAIgB,MAAM,GAAGvK,KAAK,CAACsK,MAAM,GAAG,CAAV,CAAlB;AAEAC,IAAAA,MAAM,CAACD,MAAM,GAAG,CAAV,CAAN,GAAqB,CAAC,KAAK5G,CAAN,IAAW,CAAhC;;AAEA,SAAK,IAAI8G,CAAC,GAAGF,MAAb,EAAqBE,CAAC,IAAIvB,KAA1B,EAAiCuB,CAAC,IAAI,CAAtC,EAAyC;AACvC,UAAI/B,eAAe,GAAG+B,CAAC,GAAG,CAA1B;AACA,UAAIC,SAAS,GAAGnB,eAAe,CAACD,IAAI,CAACqB,MAAL,CAAYjC,eAAZ,CAAD,CAA/B;;AAEA,UAAImB,cAAJ,EAAoB;AAClB;AACAC,QAAAA,SAAS,CAACpB,eAAD,CAAT,GAA6B,CAAC,CAAC,CAACgC,SAAhC;AACD,OAPsC,CASvC;;;AACAF,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,CAAED,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,IAAiB,CAAlB,GAAuB,CAAxB,IAA6BC,SAAzC,CAVuC,CAYvC;;AACA,UAAI/G,CAAJ,EAAO;AACL6G,QAAAA,MAAM,CAACC,CAAD,CAAN,IACG,CAACT,UAAU,CAACS,CAAC,GAAG,CAAL,CAAV,GAAoBT,UAAU,CAACS,CAAD,CAA/B,KAAuC,CAAxC,GAA6C,CAA7C,GAAiDT,UAAU,CAACS,CAAC,GAAG,CAAL,CAD7D;AAED;;AAED,UAAID,MAAM,CAACC,CAAD,CAAN,GAAYN,IAAhB,EAAsB;AACpBF,QAAAA,UAAU,GAAG1B,cAAc,CAACC,OAAD,EAAU;AACnCC,UAAAA,MAAM,EAAE9E,CAD2B;AAEnC+E,UAAAA,eAFmC;AAGnCC,UAAAA,gBAHmC;AAInC9D,UAAAA,QAJmC;AAKnCI,UAAAA;AALmC,SAAV,CAA3B,CADoB,CASpB;AACA;;AACA,YAAIgF,UAAU,IAAIN,gBAAlB,EAAoC;AAClC;AACAA,UAAAA,gBAAgB,GAAGM,UAAnB;AACAL,UAAAA,YAAY,GAAGlB,eAAf,CAHkC,CAKlC;;AACA,cAAIkB,YAAY,IAAIjB,gBAApB,EAAsC;AACpC;AACD,WARiC,CAUlC;;;AACAO,UAAAA,KAAK,GAAGvD,IAAI,CAAClE,GAAL,CAAS,CAAT,EAAY,IAAIkH,gBAAJ,GAAuBiB,YAAnC,CAAR;AACD;AACF;AACF,KAjFqC,CAmFtC;;;AACA,UAAMpF,KAAK,GAAG+D,cAAc,CAACC,OAAD,EAAU;AACpCC,MAAAA,MAAM,EAAE9E,CAAC,GAAG,CADwB;AAEpC+E,MAAAA,eAAe,EAAEC,gBAFmB;AAGpCA,MAAAA,gBAHoC;AAIpC9D,MAAAA,QAJoC;AAKpCI,MAAAA;AALoC,KAAV,CAA5B;;AAQA,QAAIT,KAAK,GAAGmF,gBAAZ,EAA8B;AAC5B;AACD;;AAEDK,IAAAA,UAAU,GAAGQ,MAAb;AACD;;AAED,QAAMnK,MAAM,GAAG;AACbuK,IAAAA,OAAO,EAAEhB,YAAY,IAAI,CADZ;AAEb;AACApF,IAAAA,KAAK,EAAEmB,IAAI,CAAClE,GAAL,CAAS,KAAT,EAAgBwI,UAAhB;AAHM,GAAf;;AAMA,MAAIJ,cAAJ,EAAoB;AAClB,UAAMZ,OAAO,GAAGF,oBAAoB,CAACe,SAAD,EAAY9F,kBAAZ,CAApC;;AACA,QAAI,CAACiF,OAAO,CAACjI,MAAb,EAAqB;AACnBX,MAAAA,MAAM,CAACuK,OAAP,GAAiB,KAAjB;AACD,KAFD,MAEO,IAAI9G,cAAJ,EAAoB;AACzBzD,MAAAA,MAAM,CAAC4I,OAAP,GAAiBA,OAAjB;AACD;AACF;;AAED,SAAO5I,MAAP;AACD;;AAED,SAASwK,qBAAT,CAA+BrC,OAA/B,EAAwC;AACtC,MAAI2B,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIxG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG4E,OAAO,CAACxH,MAA9B,EAAsC2C,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,IAAI,CAApD,EAAuD;AACrD,UAAMmH,IAAI,GAAGtC,OAAO,CAACmC,MAAR,CAAehH,CAAf,CAAb;AACAwG,IAAAA,IAAI,CAACW,IAAD,CAAJ,GAAa,CAACX,IAAI,CAACW,IAAD,CAAJ,IAAc,CAAf,IAAqB,KAAMlH,GAAG,GAAGD,CAAN,GAAU,CAAlD;AACD;;AAED,SAAOwG,IAAP;AACD;;AAED,MAAMY,WAAN,CAAkB;AAChB/I,EAAAA,WAAW,CACTwG,OADS,EAYT;AAAA,QAVA;AACE7D,MAAAA,QAAQ,GAAGS,MAAM,CAACT,QADpB;AAEEC,MAAAA,SAAS,GAAGQ,MAAM,CAACR,SAFrB;AAGEC,MAAAA,QAAQ,GAAGO,MAAM,CAACP,QAHpB;AAIEf,MAAAA,cAAc,GAAGsB,MAAM,CAACtB,cAJ1B;AAKEC,MAAAA,cAAc,GAAGqB,MAAM,CAACrB,cAL1B;AAMEC,MAAAA,kBAAkB,GAAGoB,MAAM,CAACpB,kBAN9B;AAOEE,MAAAA,eAAe,GAAGkB,MAAM,CAAClB,eAP3B;AAQEe,MAAAA,cAAc,GAAGG,MAAM,CAACH;AAR1B,KAUA,uEADI,EACJ;AACA,SAAK+F,OAAL,GAAe;AACbrG,MAAAA,QADa;AAEbC,MAAAA,SAFa;AAGbC,MAAAA,QAHa;AAIbf,MAAAA,cAJa;AAKbC,MAAAA,cALa;AAMbC,MAAAA,kBANa;AAObE,MAAAA,eAPa;AAQbe,MAAAA;AARa,KAAf;AAWA,SAAKuD,OAAL,GAAetE,eAAe,GAAGsE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;AAEA,SAAKC,MAAL,GAAc,EAAd;;AAEA,QAAI,CAAC,KAAK1C,OAAL,CAAaxH,MAAlB,EAA0B;AACxB;AACD;;AAED,UAAMmK,QAAQ,GAAG,CAAC3C,OAAD,EAAU4C,UAAV,KAAyB;AACxC,WAAKF,MAAL,CAAYzI,IAAZ,CAAiB;AACf+F,QAAAA,OADe;AAEf6C,QAAAA,QAAQ,EAAER,qBAAqB,CAACrC,OAAD,CAFhB;AAGf4C,QAAAA;AAHe,OAAjB;AAKD,KAND;;AAQA,UAAMxH,GAAG,GAAG,KAAK4E,OAAL,CAAaxH,MAAzB;;AAEA,QAAI4C,GAAG,GAAGwF,QAAV,EAAoB;AAClB,UAAIzF,CAAC,GAAG,CAAR;AACA,YAAM2H,SAAS,GAAG1H,GAAG,GAAGwF,QAAxB;AACA,YAAMD,GAAG,GAAGvF,GAAG,GAAG0H,SAAlB;;AAEA,aAAO3H,CAAC,GAAGwF,GAAX,EAAgB;AACdgC,QAAAA,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoB5H,CAApB,EAAuByF,QAAvB,CAAD,EAAmCzF,CAAnC,CAAR;AACAA,QAAAA,CAAC,IAAIyF,QAAL;AACD;;AAED,UAAIkC,SAAJ,EAAe;AACb,cAAMF,UAAU,GAAGxH,GAAG,GAAGwF,QAAzB;AACA+B,QAAAA,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoBH,UAApB,CAAD,EAAkCA,UAAlC,CAAR;AACD;AACF,KAdD,MAcO;AACLD,MAAAA,QAAQ,CAAC,KAAK3C,OAAN,EAAe,CAAf,CAAR;AACD;AACF;;AAEDgD,EAAAA,QAAQ,CAAClC,IAAD,EAAO;AACb,UAAM;AAAEpF,MAAAA,eAAF;AAAmBJ,MAAAA;AAAnB,QAAsC,KAAKkH,OAAjD;;AAEA,QAAI,CAAC9G,eAAL,EAAsB;AACpBoF,MAAAA,IAAI,GAAGA,IAAI,CAAC2B,WAAL,EAAP;AACD,KALY,CAOb;;;AACA,QAAI,KAAKzC,OAAL,KAAiBc,IAArB,EAA2B;AACzB,UAAIjJ,MAAM,GAAG;AACXuK,QAAAA,OAAO,EAAE,IADE;AAEXpG,QAAAA,KAAK,EAAE;AAFI,OAAb;;AAKA,UAAIV,cAAJ,EAAoB;AAClBzD,QAAAA,MAAM,CAAC4I,OAAP,GAAiB,CAAC,CAAC,CAAD,EAAIK,IAAI,CAACtI,MAAL,GAAc,CAAlB,CAAD,CAAjB;AACD;;AAED,aAAOX,MAAP;AACD,KAnBY,CAqBb;;;AACA,UAAM;AACJsE,MAAAA,QADI;AAEJE,MAAAA,QAFI;AAGJD,MAAAA,SAHI;AAIJb,MAAAA,cAJI;AAKJC,MAAAA,kBALI;AAMJiB,MAAAA;AANI,QAOF,KAAK+F,OAPT;AASA,QAAIS,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,UAAU,GAAG,KAAjB;AAEA,SAAKT,MAAL,CAAY7I,OAAZ,CAAoB,QAAuC;AAAA,UAAtC;AAAEmG,QAAAA,OAAF;AAAW6C,QAAAA,QAAX;AAAqBD,QAAAA;AAArB,OAAsC;AACzD,YAAM;AAAER,QAAAA,OAAF;AAAWpG,QAAAA,KAAX;AAAkByE,QAAAA;AAAlB,UAA8BI,MAAM,CAACC,IAAD,EAAOd,OAAP,EAAgB6C,QAAhB,EAA0B;AAClE1G,QAAAA,QAAQ,EAAEA,QAAQ,GAAGyG,UAD6C;AAElEvG,QAAAA,QAFkE;AAGlED,QAAAA,SAHkE;AAIlEb,QAAAA,cAJkE;AAKlEC,QAAAA,kBALkE;AAMlEF,QAAAA,cANkE;AAOlEmB,QAAAA;AAPkE,OAA1B,CAA1C;;AAUA,UAAI2F,OAAJ,EAAa;AACXe,QAAAA,UAAU,GAAG,IAAb;AACD;;AAEDD,MAAAA,UAAU,IAAIlH,KAAd;;AAEA,UAAIoG,OAAO,IAAI3B,OAAf,EAAwB;AACtBwC,QAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB,GAAGxC,OAAnB,CAAb;AACD;AACF,KApBD;AAsBA,QAAI5I,MAAM,GAAG;AACXuK,MAAAA,OAAO,EAAEe,UADE;AAEXnH,MAAAA,KAAK,EAAEmH,UAAU,GAAGD,UAAU,GAAG,KAAKR,MAAL,CAAYlK,MAA5B,GAAqC;AAF3C,KAAb;;AAKA,QAAI2K,UAAU,IAAI7H,cAAlB,EAAkC;AAChCzD,MAAAA,MAAM,CAAC4I,OAAP,GAAiBwC,UAAjB;AACD;;AAED,WAAOpL,MAAP;AACD;;AAjIe;;AAoIlB,MAAMuL,SAAN,CAAgB;AACd5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AACkB,SAAZqD,YAAY,CAACrD,OAAD,EAAU;AAC3B,WAAOsD,QAAQ,CAACtD,OAAD,EAAU,KAAKuD,UAAf,CAAf;AACD;;AACmB,SAAbC,aAAa,CAACxD,OAAD,EAAU;AAC5B,WAAOsD,QAAQ,CAACtD,OAAD,EAAU,KAAKyD,WAAf,CAAf;AACD;;AACD5C,EAAAA,MAAM,GAAW,CAAE;;AAVL;;AAahB,SAASyC,QAAT,CAAkBtD,OAAlB,EAA2B0D,GAA3B,EAAgC;AAC9B,QAAMC,OAAO,GAAG3D,OAAO,CAAC1C,KAAR,CAAcoG,GAAd,CAAhB;AACA,SAAOC,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgB,IAA9B;AACD,C,CAED;;;AAEA,MAAMC,UAAN,SAAyBR,SAAzB,CAAmC;AACjC5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,OAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,WAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,SAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMsB,OAAO,GAAGtB,IAAI,KAAK,KAAKd,OAA9B;AAEA,WAAO;AACLoC,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAaxH,MAAb,GAAsB,CAA1B;AAHJ,KAAP;AAKD;;AArBgC,C,CAwBnC;;;AAEA,MAAMsL,iBAAN,SAAgCV,SAAhC,CAA0C;AACxC5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,eAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,WAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,SAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAM5F,KAAK,GAAG4F,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,CAAd;AACA,UAAMoC,OAAO,GAAGlH,KAAK,KAAK,CAAC,CAA3B;AAEA,WAAO;AACLkH,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACtI,MAAL,GAAc,CAAlB;AAHJ,KAAP;AAKD;;AAtBuC,C,CAyB1C;;;AAEA,MAAMuL,gBAAN,SAA+BX,SAA/B,CAAyC;AACvC5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,cAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,YAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,UAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMsB,OAAO,GAAGtB,IAAI,CAACkD,UAAL,CAAgB,KAAKhE,OAArB,CAAhB;AAEA,WAAO;AACLoC,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAaxH,MAAb,GAAsB,CAA1B;AAHJ,KAAP;AAKD;;AArBsC,C,CAwBzC;;;AAEA,MAAMyL,uBAAN,SAAsCb,SAAtC,CAAgD;AAC9C5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,sBAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,aAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,WAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMsB,OAAO,GAAG,CAACtB,IAAI,CAACkD,UAAL,CAAgB,KAAKhE,OAArB,CAAjB;AAEA,WAAO;AACLoC,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACtI,MAAL,GAAc,CAAlB;AAHJ,KAAP;AAKD;;AArB6C,C,CAwBhD;;;AAEA,MAAM0L,gBAAN,SAA+Bd,SAA/B,CAAyC;AACvC5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,cAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,YAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,UAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMsB,OAAO,GAAGtB,IAAI,CAACqD,QAAL,CAAc,KAAKnE,OAAnB,CAAhB;AAEA,WAAO;AACLoC,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAACK,IAAI,CAACtI,MAAL,GAAc,KAAKwH,OAAL,CAAaxH,MAA5B,EAAoCsI,IAAI,CAACtI,MAAL,GAAc,CAAlD;AAHJ,KAAP;AAKD;;AArBsC,C,CAwBzC;;;AAEA,MAAM4L,uBAAN,SAAsChB,SAAtC,CAAgD;AAC9C5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,sBAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,aAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,WAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMsB,OAAO,GAAG,CAACtB,IAAI,CAACqD,QAAL,CAAc,KAAKnE,OAAnB,CAAjB;AACA,WAAO;AACLoC,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACtI,MAAL,GAAc,CAAlB;AAHJ,KAAP;AAKD;;AApB6C;;AAuBhD,MAAM6L,UAAN,SAAyBjB,SAAzB,CAAmC;AACjC5J,EAAAA,WAAW,CACTwG,OADS,EAYT;AAAA,QAVA;AACE7D,MAAAA,QAAQ,GAAGS,MAAM,CAACT,QADpB;AAEEC,MAAAA,SAAS,GAAGQ,MAAM,CAACR,SAFrB;AAGEC,MAAAA,QAAQ,GAAGO,MAAM,CAACP,QAHpB;AAIEf,MAAAA,cAAc,GAAGsB,MAAM,CAACtB,cAJ1B;AAKEC,MAAAA,cAAc,GAAGqB,MAAM,CAACrB,cAL1B;AAMEC,MAAAA,kBAAkB,GAAGoB,MAAM,CAACpB,kBAN9B;AAOEE,MAAAA,eAAe,GAAGkB,MAAM,CAAClB,eAP3B;AAQEe,MAAAA,cAAc,GAAGG,MAAM,CAACH;AAR1B,KAUA,uEADI,EACJ;AACA,UAAMuD,OAAN;AACA,SAAKsE,YAAL,GAAoB,IAAI/B,WAAJ,CAAgBvC,OAAhB,EAAyB;AAC3C7D,MAAAA,QAD2C;AAE3CC,MAAAA,SAF2C;AAG3CC,MAAAA,QAH2C;AAI3Cf,MAAAA,cAJ2C;AAK3CC,MAAAA,cAL2C;AAM3CC,MAAAA,kBAN2C;AAO3CE,MAAAA,eAP2C;AAQ3Ce,MAAAA;AAR2C,KAAzB,CAApB;AAUD;;AACc,aAAJoH,IAAI,GAAG;AAChB,WAAO,OAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,UAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,QAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,WAAO,KAAKwD,YAAL,CAAkBtB,QAAlB,CAA2BlC,IAA3B,CAAP;AACD;;AArCgC,C,CAwCnC;;;AAEA,MAAMyD,YAAN,SAA2BnB,SAA3B,CAAqC;AACnC5J,EAAAA,WAAW,CAACwG,OAAD,EAAU;AACnB,UAAMA,OAAN;AACD;;AACc,aAAJ6D,IAAI,GAAG;AAChB,WAAO,SAAP;AACD;;AACoB,aAAVN,UAAU,GAAG;AACtB,WAAO,WAAP;AACD;;AACqB,aAAXE,WAAW,GAAG;AACvB,WAAO,SAAP;AACD;;AACD5C,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,QAAI3E,QAAQ,GAAG,CAAf;AACA,QAAIjB,KAAJ;AAEA,UAAMuF,OAAO,GAAG,EAAhB;AACA,UAAMO,UAAU,GAAG,KAAKhB,OAAL,CAAaxH,MAAhC,CALW,CAOX;;AACA,WAAO,CAAC0C,KAAK,GAAG4F,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,EAA2B7D,QAA3B,CAAT,IAAiD,CAAC,CAAzD,EAA4D;AAC1DA,MAAAA,QAAQ,GAAGjB,KAAK,GAAG8F,UAAnB;AACAP,MAAAA,OAAO,CAACxG,IAAR,CAAa,CAACiB,KAAD,EAAQiB,QAAQ,GAAG,CAAnB,CAAb;AACD;;AAED,UAAMiG,OAAO,GAAG,CAAC,CAAC3B,OAAO,CAACjI,MAA1B;AAEA,WAAO;AACL4J,MAAAA,OADK;AAELpG,MAAAA,KAAK,EAAEoG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,MAAAA;AAHK,KAAP;AAKD;;AAjCkC,C,CAoCrC;;;AACA,MAAM+D,SAAS,GAAG,CAChBZ,UADgB,EAEhBW,YAFgB,EAGhBR,gBAHgB,EAIhBE,uBAJgB,EAKhBG,uBALgB,EAMhBF,gBANgB,EAOhBJ,iBAPgB,EAQhBO,UARgB,CAAlB;AAWA,MAAMI,YAAY,GAAGD,SAAS,CAAChM,MAA/B,C,CAEA;;AACA,MAAMkM,QAAQ,GAAG,kCAAjB;AACA,MAAMC,QAAQ,GAAG,GAAjB,C,CAEA;AACA;AACA;;AACA,SAASC,UAAT,CAAoB5E,OAApB,EAA2C;AAAA,MAAdwC,OAAc,uEAAJ,EAAI;AACzC,SAAOxC,OAAO,CAACnF,KAAR,CAAc8J,QAAd,EAAwB/E,GAAxB,CAA6Bb,IAAD,IAAU;AAC3C,QAAI8F,KAAK,GAAG9F,IAAI,CACbxG,IADS,GAETsC,KAFS,CAEH6J,QAFG,EAGTI,MAHS,CAGD/F,IAAD,IAAUA,IAAI,IAAI,CAAC,CAACA,IAAI,CAACxG,IAAL,EAHlB,CAAZ;AAKA,QAAIwM,OAAO,GAAG,EAAd;;AACA,SAAK,IAAI5J,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGyJ,KAAK,CAACrM,MAA5B,EAAoC2C,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnD,YAAM6J,SAAS,GAAGH,KAAK,CAAC1J,CAAD,CAAvB,CADmD,CAGnD;;AACA,UAAI8J,KAAK,GAAG,KAAZ;AACA,UAAIhJ,GAAG,GAAG,CAAC,CAAX;;AACA,aAAO,CAACgJ,KAAD,IAAU,EAAEhJ,GAAF,GAAQwI,YAAzB,EAAuC;AACrC,cAAMS,QAAQ,GAAGV,SAAS,CAACvI,GAAD,CAA1B;AACA,YAAIkJ,KAAK,GAAGD,QAAQ,CAAC7B,YAAT,CAAsB2B,SAAtB,CAAZ;;AACA,YAAIG,KAAJ,EAAW;AACTJ,UAAAA,OAAO,CAAC9K,IAAR,CAAa,IAAIiL,QAAJ,CAAaC,KAAb,EAAoB3C,OAApB,CAAb;AACAyC,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,UAAIA,KAAJ,EAAW;AACT;AACD,OAjBkD,CAmBnD;;;AACAhJ,MAAAA,GAAG,GAAG,CAAC,CAAP;;AACA,aAAO,EAAEA,GAAF,GAAQwI,YAAf,EAA6B;AAC3B,cAAMS,QAAQ,GAAGV,SAAS,CAACvI,GAAD,CAA1B;AACA,YAAIkJ,KAAK,GAAGD,QAAQ,CAAC1B,aAAT,CAAuBwB,SAAvB,CAAZ;;AACA,YAAIG,KAAJ,EAAW;AACTJ,UAAAA,OAAO,CAAC9K,IAAR,CAAa,IAAIiL,QAAJ,CAAaC,KAAb,EAAoB3C,OAApB,CAAb;AACA;AACD;AACF;AACF;;AAED,WAAOuC,OAAP;AACD,GAvCM,CAAP;AAwCD,C,CAED;AACA;;;AACA,MAAMK,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAAChB,UAAU,CAACR,IAAZ,EAAkBU,YAAY,CAACV,IAA/B,CAAR,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMyB,cAAN,CAAqB;AACnB9L,EAAAA,WAAW,CACTwG,OADS,EAYT;AAAA,QAVA;AACEtE,MAAAA,eAAe,GAAGkB,MAAM,CAAClB,eAD3B;AAEEJ,MAAAA,cAAc,GAAGsB,MAAM,CAACtB,cAF1B;AAGEE,MAAAA,kBAAkB,GAAGoB,MAAM,CAACpB,kBAH9B;AAIEiB,MAAAA,cAAc,GAAGG,MAAM,CAACH,cAJ1B;AAKElB,MAAAA,cAAc,GAAGqB,MAAM,CAACrB,cAL1B;AAMEY,MAAAA,QAAQ,GAAGS,MAAM,CAACT,QANpB;AAOEC,MAAAA,SAAS,GAAGQ,MAAM,CAACR,SAPrB;AAQEC,MAAAA,QAAQ,GAAGO,MAAM,CAACP;AARpB,KAUA,uEADI,EACJ;AACA,SAAKwI,KAAL,GAAa,IAAb;AACA,SAAKrC,OAAL,GAAe;AACb9G,MAAAA,eADa;AAEbJ,MAAAA,cAFa;AAGbE,MAAAA,kBAHa;AAIbD,MAAAA,cAJa;AAKbkB,MAAAA,cALa;AAMbN,MAAAA,QANa;AAObC,MAAAA,SAPa;AAQbC,MAAAA;AARa,KAAf;AAWA,SAAK2D,OAAL,GAAetE,eAAe,GAAGsE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;AACA,SAAKoC,KAAL,GAAaD,UAAU,CAAC,KAAK5E,OAAN,EAAe,KAAKwC,OAApB,CAAvB;AACD;;AAEe,SAAT+C,SAAS,CAACC,CAAD,EAAIhD,OAAJ,EAAa;AAC3B,WAAOA,OAAO,CAACjG,iBAAf;AACD;;AAEDyG,EAAAA,QAAQ,CAAClC,IAAD,EAAO;AACb,UAAM+D,KAAK,GAAG,KAAKA,KAAnB;;AAEA,QAAI,CAACA,KAAL,EAAY;AACV,aAAO;AACLzC,QAAAA,OAAO,EAAE,KADJ;AAELpG,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;AAED,UAAM;AAAEV,MAAAA,cAAF;AAAkBI,MAAAA;AAAlB,QAAsC,KAAK8G,OAAjD;AAEA1B,IAAAA,IAAI,GAAGpF,eAAe,GAAGoF,IAAH,GAAUA,IAAI,CAAC2B,WAAL,EAAhC;AAEA,QAAIgD,UAAU,GAAG,CAAjB;AACA,QAAIxC,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,CAAjB,CAhBa,CAkBb;;AACA,SAAK,IAAI/H,CAAC,GAAG,CAAR,EAAWuK,IAAI,GAAGb,KAAK,CAACrM,MAA7B,EAAqC2C,CAAC,GAAGuK,IAAzC,EAA+CvK,CAAC,IAAI,CAApD,EAAuD;AACrD,YAAMqJ,SAAS,GAAGK,KAAK,CAAC1J,CAAD,CAAvB,CADqD,CAGrD;;AACA8H,MAAAA,UAAU,CAACzK,MAAX,GAAoB,CAApB;AACAiN,MAAAA,UAAU,GAAG,CAAb,CALqD,CAOrD;;AACA,WAAK,IAAIxD,CAAC,GAAG,CAAR,EAAW0D,IAAI,GAAGnB,SAAS,CAAChM,MAAjC,EAAyCyJ,CAAC,GAAG0D,IAA7C,EAAmD1D,CAAC,IAAI,CAAxD,EAA2D;AACzD,cAAMiD,QAAQ,GAAGV,SAAS,CAACvC,CAAD,CAA1B;AACA,cAAM;AAAEG,UAAAA,OAAF;AAAW3B,UAAAA,OAAX;AAAoBzE,UAAAA;AAApB,YAA8BkJ,QAAQ,CAACrE,MAAT,CAAgBC,IAAhB,CAApC;;AAEA,YAAIsB,OAAJ,EAAa;AACXqD,UAAAA,UAAU,IAAI,CAAd;AACAvC,UAAAA,UAAU,IAAIlH,KAAd;;AACA,cAAIV,cAAJ,EAAoB;AAClB,kBAAMuI,IAAI,GAAGqB,QAAQ,CAAC1L,WAAT,CAAqBqK,IAAlC;;AACA,gBAAIuB,aAAa,CAAC7H,GAAd,CAAkBsG,IAAlB,CAAJ,EAA6B;AAC3BZ,cAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB,GAAGxC,OAAnB,CAAb;AACD,aAFD,MAEO;AACLwC,cAAAA,UAAU,CAAChJ,IAAX,CAAgBwG,OAAhB;AACD;AACF;AACF,SAXD,MAWO;AACLyC,UAAAA,UAAU,GAAG,CAAb;AACAuC,UAAAA,UAAU,GAAG,CAAb;AACAxC,UAAAA,UAAU,CAACzK,MAAX,GAAoB,CAApB;AACA;AACD;AACF,OA7BoD,CA+BrD;;;AACA,UAAIiN,UAAJ,EAAgB;AACd,YAAI5N,MAAM,GAAG;AACXuK,UAAAA,OAAO,EAAE,IADE;AAEXpG,UAAAA,KAAK,EAAEkH,UAAU,GAAGuC;AAFT,SAAb;;AAKA,YAAInK,cAAJ,EAAoB;AAClBzD,UAAAA,MAAM,CAAC4I,OAAP,GAAiBwC,UAAjB;AACD;;AAED,eAAOpL,MAAP;AACD;AACF,KA/DY,CAiEb;;;AACA,WAAO;AACLuK,MAAAA,OAAO,EAAE,KADJ;AAELpG,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AAxGkB;;AA2GrB,MAAM4J,mBAAmB,GAAG,EAA5B;;AAEA,SAASC,QAAT,GAA2B;AACzBD,EAAAA,mBAAmB,CAAC3L,IAApB,CAAyB,YAAzB;AACD;;AAED,SAAS6L,cAAT,CAAwB9F,OAAxB,EAAiCwC,OAAjC,EAA0C;AACxC,OAAK,IAAIrH,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGwK,mBAAmB,CAACpN,MAA1C,EAAkD2C,CAAC,GAAGC,GAAtD,EAA2DD,CAAC,IAAI,CAAhE,EAAmE;AACjE,QAAI4K,aAAa,GAAGH,mBAAmB,CAACzK,CAAD,CAAvC;;AACA,QAAI4K,aAAa,CAACR,SAAd,CAAwBvF,OAAxB,EAAiCwC,OAAjC,CAAJ,EAA+C;AAC7C,aAAO,IAAIuD,aAAJ,CAAkB/F,OAAlB,EAA2BwC,OAA3B,CAAP;AACD;AACF;;AAED,SAAO,IAAID,WAAJ,CAAgBvC,OAAhB,EAAyBwC,OAAzB,CAAP;AACD;;AAED,MAAMwD,eAAe,GAAG;AACtBC,EAAAA,GAAG,EAAE,MADiB;AAEtBC,EAAAA,EAAE,EAAE;AAFkB,CAAxB;AAKA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,OADQ;AAEdC,EAAAA,OAAO,EAAE;AAFK,CAAhB;;AAKA,MAAMC,YAAY,GAAIzB,KAAD,IACnB,CAAC,EAAEA,KAAK,CAACmB,eAAe,CAACC,GAAjB,CAAL,IAA8BpB,KAAK,CAACmB,eAAe,CAACE,EAAjB,CAArC,CADH;;AAGA,MAAMK,MAAM,GAAI1B,KAAD,IAAW,CAAC,CAACA,KAAK,CAACsB,OAAO,CAACC,IAAT,CAAjC;;AAEA,MAAMI,MAAM,GAAI3B,KAAD,IACb,CAACtN,OAAO,CAACsN,KAAD,CAAR,IAAmB1M,QAAQ,CAAC0M,KAAD,CAA3B,IAAsC,CAACyB,YAAY,CAACzB,KAAD,CADrD;;AAGA,MAAM4B,iBAAiB,GAAI5B,KAAD,KAAY;AACpC,GAACmB,eAAe,CAACC,GAAjB,GAAuBxN,MAAM,CAACgB,IAAP,CAAYoL,KAAZ,EAAmBjF,GAAnB,CAAwB7G,GAAD,KAAU;AACtD,KAACA,GAAD,GAAO8L,KAAK,CAAC9L,GAAD;AAD0C,GAAV,CAAvB;AADa,CAAZ,CAA1B,C,CAMA;AACA;;;AACA,SAAS2N,KAAT,CAAe7B,KAAf,EAAsBrC,OAAtB,EAAqD;AAAA,MAAtB;AAAEmE,IAAAA,IAAI,GAAG;AAAT,GAAsB,uEAAJ,EAAI;;AACnD,QAAMC,IAAI,GAAI/B,KAAD,IAAW;AACtB,QAAIpL,IAAI,GAAGhB,MAAM,CAACgB,IAAP,CAAYoL,KAAZ,CAAX;AAEA,UAAMgC,WAAW,GAAGN,MAAM,CAAC1B,KAAD,CAA1B;;AAEA,QAAI,CAACgC,WAAD,IAAgBpN,IAAI,CAACjB,MAAL,GAAc,CAA9B,IAAmC,CAAC8N,YAAY,CAACzB,KAAD,CAApD,EAA6D;AAC3D,aAAO+B,IAAI,CAACH,iBAAiB,CAAC5B,KAAD,CAAlB,CAAX;AACD;;AAED,QAAI2B,MAAM,CAAC3B,KAAD,CAAV,EAAmB;AACjB,YAAM9L,GAAG,GAAG8N,WAAW,GAAGhC,KAAK,CAACsB,OAAO,CAACC,IAAT,CAAR,GAAyB3M,IAAI,CAAC,CAAD,CAApD;AAEA,YAAMuG,OAAO,GAAG6G,WAAW,GAAGhC,KAAK,CAACsB,OAAO,CAACE,OAAT,CAAR,GAA4BxB,KAAK,CAAC9L,GAAD,CAA5D;;AAEA,UAAI,CAAChB,QAAQ,CAACiI,OAAD,CAAb,EAAwB;AACtB,cAAM,IAAIpF,KAAJ,CAAU9B,oCAAoC,CAACC,GAAD,CAA9C,CAAN;AACD;;AAED,YAAMe,GAAG,GAAG;AACVM,QAAAA,KAAK,EAAEO,WAAW,CAAC5B,GAAD,CADR;AAEViH,QAAAA;AAFU,OAAZ;;AAKA,UAAI2G,IAAJ,EAAU;AACR7M,QAAAA,GAAG,CAACoL,QAAJ,GAAeY,cAAc,CAAC9F,OAAD,EAAUwC,OAAV,CAA7B;AACD;;AAED,aAAO1I,GAAP;AACD;;AAED,QAAIgN,IAAI,GAAG;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,QAAQ,EAAEvN,IAAI,CAAC,CAAD;AAFL,KAAX;AAKAA,IAAAA,IAAI,CAACI,OAAL,CAAcd,GAAD,IAAS;AACpB,YAAMvB,KAAK,GAAGqN,KAAK,CAAC9L,GAAD,CAAnB;;AAEA,UAAIxB,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBA,QAAAA,KAAK,CAACqC,OAAN,CAAekF,IAAD,IAAU;AACtB+H,UAAAA,IAAI,CAACC,QAAL,CAAc9M,IAAd,CAAmB2M,IAAI,CAAC7H,IAAD,CAAvB;AACD,SAFD;AAGD;AACF,KARD;AAUA,WAAO+H,IAAP;AACD,GA9CD;;AAgDA,MAAI,CAACR,YAAY,CAACzB,KAAD,CAAjB,EAA0B;AACxBA,IAAAA,KAAK,GAAG4B,iBAAiB,CAAC5B,KAAD,CAAzB;AACD;;AAED,SAAO+B,IAAI,CAAC/B,KAAD,CAAX;AACD,C,CAED;;;AACA,SAASoC,YAAT,CACElC,OADF,SAGE;AAAA,MADA;AAAErI,IAAAA,eAAe,GAAGE,MAAM,CAACF;AAA3B,GACA;AACAqI,EAAAA,OAAO,CAAClL,OAAR,CAAiBhC,MAAD,IAAY;AAC1B,QAAIqL,UAAU,GAAG,CAAjB;AAEArL,IAAAA,MAAM,CAAC8L,OAAP,CAAe9J,OAAf,CAAuB,SAA0B;AAAA,UAAzB;AAAEd,QAAAA,GAAF;AAAO+D,QAAAA,IAAP;AAAad,QAAAA;AAAb,OAAyB;AAC/C,YAAMhC,MAAM,GAAGjB,GAAG,GAAGA,GAAG,CAACiB,MAAP,GAAgB,IAAlC;AAEAkJ,MAAAA,UAAU,IAAI/F,IAAI,CAACC,GAAL,CACZpB,KAAK,KAAK,CAAV,IAAehC,MAAf,GAAwBkN,MAAM,CAACC,OAA/B,GAAyCnL,KAD7B,EAEZ,CAAChC,MAAM,IAAI,CAAX,KAAiB0C,eAAe,GAAG,CAAH,GAAOI,IAAvC,CAFY,CAAd;AAID,KAPD;AASAjF,IAAAA,MAAM,CAACmE,KAAP,GAAekH,UAAf;AACD,GAbD;AAcD;;AAED,SAASkE,gBAAT,CAA0BvP,MAA1B,EAAkCiI,IAAlC,EAAwC;AACtC,QAAM6D,OAAO,GAAG9L,MAAM,CAAC8L,OAAvB;AACA7D,EAAAA,IAAI,CAAC6D,OAAL,GAAe,EAAf;;AAEA,MAAI,CAACvL,SAAS,CAACuL,OAAD,CAAd,EAAyB;AACvB;AACD;;AAEDA,EAAAA,OAAO,CAAC9J,OAAR,CAAiByD,KAAD,IAAW;AACzB,QAAI,CAAClF,SAAS,CAACkF,KAAK,CAACmD,OAAP,CAAV,IAA6B,CAACnD,KAAK,CAACmD,OAAN,CAAcjI,MAAhD,EAAwD;AACtD;AACD;;AAED,UAAM;AAAEiI,MAAAA,OAAF;AAAWjJ,MAAAA;AAAX,QAAqB8F,KAA3B;AAEA,QAAIxD,GAAG,GAAG;AACR2G,MAAAA,OADQ;AAERjJ,MAAAA;AAFQ,KAAV;;AAKA,QAAI8F,KAAK,CAACvE,GAAV,EAAe;AACbe,MAAAA,GAAG,CAACf,GAAJ,GAAUuE,KAAK,CAACvE,GAAN,CAAU0B,GAApB;AACD;;AAED,QAAI6C,KAAK,CAACrB,GAAN,GAAY,CAAC,CAAjB,EAAoB;AAClBnC,MAAAA,GAAG,CAACuN,QAAJ,GAAe/J,KAAK,CAACrB,GAArB;AACD;;AAED6D,IAAAA,IAAI,CAAC6D,OAAL,CAAa1J,IAAb,CAAkBH,GAAlB;AACD,GArBD;AAsBD;;AAED,SAASwN,cAAT,CAAwBzP,MAAxB,EAAgCiI,IAAhC,EAAsC;AACpCA,EAAAA,IAAI,CAAC9D,KAAL,GAAanE,MAAM,CAACmE,KAApB;AACD;;AAED,SAASuL,MAAT,CACExC,OADF,EAEE9G,IAFF,EAOE;AAAA,MAJA;AACE3C,IAAAA,cAAc,GAAGsB,MAAM,CAACtB,cAD1B;AAEEK,IAAAA,YAAY,GAAGiB,MAAM,CAACjB;AAFxB,GAIA,uEADI,EACJ;AACA,QAAM6L,YAAY,GAAG,EAArB;AAEA,MAAIlM,cAAJ,EAAoBkM,YAAY,CAACvN,IAAb,CAAkBmN,gBAAlB;AACpB,MAAIzL,YAAJ,EAAkB6L,YAAY,CAACvN,IAAb,CAAkBqN,cAAlB;AAElB,SAAOvC,OAAO,CAACnF,GAAR,CAAa/H,MAAD,IAAY;AAC7B,UAAM;AAAEoE,MAAAA;AAAF,QAAUpE,MAAhB;AAEA,UAAMiI,IAAI,GAAG;AACXf,MAAAA,IAAI,EAAEd,IAAI,CAAChC,GAAD,CADC;AAEXoL,MAAAA,QAAQ,EAAEpL;AAFC,KAAb;;AAKA,QAAIuL,YAAY,CAAChP,MAAjB,EAAyB;AACvBgP,MAAAA,YAAY,CAAC3N,OAAb,CAAsB4N,WAAD,IAAiB;AACpCA,QAAAA,WAAW,CAAC5P,MAAD,EAASiI,IAAT,CAAX;AACD,OAFD;AAGD;;AAED,WAAOA,IAAP;AACD,GAfM,CAAP;AAgBD;;AAED,MAAM4H,IAAN,CAAW;AACTlO,EAAAA,WAAW,CAACyE,IAAD,EAA4B;AAAA,QAArBuE,OAAqB,uEAAX,EAAW;AAAA,QAAPtH,KAAO;AACrC,SAAKsH,OAAL,GAAe,EAAE,GAAG5F,MAAL;AAAa,SAAG4F;AAAhB,KAAf;;AAEA,QACE,KAAKA,OAAL,CAAajG,iBAAb,IACA,CAAC,IAFH,EAGE;AACA,YAAM,IAAI3B,KAAJ,CAAUhC,2BAAV,CAAN;AACD;;AAED,SAAK+O,SAAL,GAAiB,IAAIpO,QAAJ,CAAa,KAAKiJ,OAAL,CAAa/I,IAA1B,CAAjB;AAEA,SAAKmO,aAAL,CAAmB3J,IAAnB,EAAyB/C,KAAzB;AACD;;AAED0M,EAAAA,aAAa,CAAC3J,IAAD,EAAO/C,KAAP,EAAc;AACzB,SAAK2M,KAAL,GAAa5J,IAAb;;AAEA,QAAI/C,KAAK,IAAI,EAAEA,KAAK,YAAY2C,SAAnB,CAAb,EAA4C;AAC1C,YAAM,IAAIjD,KAAJ,CAAU/B,oBAAV,CAAN;AACD;;AAED,SAAKiP,QAAL,GACE5M,KAAK,IACLwE,WAAW,CAAC,KAAK8C,OAAL,CAAa/I,IAAd,EAAoB,KAAKoO,KAAzB,EAAgC;AACzCrL,MAAAA,KAAK,EAAE,KAAKgG,OAAL,CAAahG,KADqB;AAEzCG,MAAAA,eAAe,EAAE,KAAK6F,OAAL,CAAa7F;AAFW,KAAhC,CAFb;AAMD;;AAED+B,EAAAA,GAAG,CAACJ,GAAD,EAAM;AACP,QAAI,CAAClG,SAAS,CAACkG,GAAD,CAAd,EAAqB;AACnB;AACD;;AAED,SAAKuJ,KAAL,CAAW5N,IAAX,CAAgBqE,GAAhB;;AACA,SAAKwJ,QAAL,CAAcpJ,GAAd,CAAkBJ,GAAlB;AACD;;AAEDyJ,EAAAA,MAAM,GAAwC;AAAA,QAAvCC,SAAuC,uEAA3B,MAAoB,KAAO;AAC5C,UAAMjD,OAAO,GAAG,EAAhB;;AAEA,SAAK,IAAI5J,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKyM,KAAL,CAAWrP,MAAjC,EAAyC2C,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,IAAI,CAAvD,EAA0D;AACxD,YAAMmD,GAAG,GAAG,KAAKuJ,KAAL,CAAW1M,CAAX,CAAZ;;AACA,UAAI6M,SAAS,CAAC1J,GAAD,EAAMnD,CAAN,CAAb,EAAuB;AACrB,aAAKyD,QAAL,CAAczD,CAAd;AACAA,QAAAA,CAAC,IAAI,CAAL;AACAC,QAAAA,GAAG,IAAI,CAAP;AAEA2J,QAAAA,OAAO,CAAC9K,IAAR,CAAaqE,GAAb;AACD;AACF;;AAED,WAAOyG,OAAP;AACD;;AAEDnG,EAAAA,QAAQ,CAAC3C,GAAD,EAAM;AACZ,SAAK4L,KAAL,CAAWhJ,MAAX,CAAkB5C,GAAlB,EAAuB,CAAvB;;AACA,SAAK6L,QAAL,CAAclJ,QAAd,CAAuB3C,GAAvB;AACD;;AAEDgM,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKH,QAAZ;AACD;;AAEDjH,EAAAA,MAAM,CAACgE,KAAD,EAA6B;AAAA,QAArB;AAAEqD,MAAAA,KAAK,GAAG,CAAC;AAAX,KAAqB,uEAAJ,EAAI;AACjC,UAAM;AACJ5M,MAAAA,cADI;AAEJK,MAAAA,YAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,MAJI;AAKJa,MAAAA;AALI,QAMF,KAAK8F,OANT;AAQA,QAAIuC,OAAO,GAAGhN,QAAQ,CAAC8M,KAAD,CAAR,GACV9M,QAAQ,CAAC,KAAK8P,KAAL,CAAW,CAAX,CAAD,CAAR,GACE,KAAKM,iBAAL,CAAuBtD,KAAvB,CADF,GAEE,KAAKuD,iBAAL,CAAuBvD,KAAvB,CAHQ,GAIV,KAAKwD,cAAL,CAAoBxD,KAApB,CAJJ;AAMAoC,IAAAA,YAAY,CAAClC,OAAD,EAAU;AAAErI,MAAAA;AAAF,KAAV,CAAZ;;AAEA,QAAId,UAAJ,EAAgB;AACdmJ,MAAAA,OAAO,CAACuD,IAAR,CAAazM,MAAb;AACD;;AAED,QAAI7D,QAAQ,CAACkQ,KAAD,CAAR,IAAmBA,KAAK,GAAG,CAAC,CAAhC,EAAmC;AACjCnD,MAAAA,OAAO,GAAGA,OAAO,CAACwD,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CAAV;AACD;;AAED,WAAOX,MAAM,CAACxC,OAAD,EAAU,KAAK8C,KAAf,EAAsB;AACjCvM,MAAAA,cADiC;AAEjCK,MAAAA;AAFiC,KAAtB,CAAb;AAID;;AAEDwM,EAAAA,iBAAiB,CAACtD,KAAD,EAAQ;AACvB,UAAMK,QAAQ,GAAGY,cAAc,CAACjB,KAAD,EAAQ,KAAKrC,OAAb,CAA/B;AACA,UAAM;AAAEtE,MAAAA;AAAF,QAAc,KAAK4J,QAAzB;AACA,UAAM/C,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;AACA7G,IAAAA,OAAO,CAACrE,OAAR,CAAgB,SAAkC;AAAA,UAAjC;AAAEoF,QAAAA,CAAC,EAAE6B,IAAL;AAAW3F,QAAAA,CAAC,EAAEc,GAAd;AAAmBuB,QAAAA,CAAC,EAAEV;AAAtB,OAAiC;;AAChD,UAAI,CAAC1E,SAAS,CAAC0I,IAAD,CAAd,EAAsB;AACpB;AACD;;AAED,YAAM;AAAEsB,QAAAA,OAAF;AAAWpG,QAAAA,KAAX;AAAkByE,QAAAA;AAAlB,UAA8ByE,QAAQ,CAAClC,QAAT,CAAkBlC,IAAlB,CAApC;;AAEA,UAAIsB,OAAJ,EAAa;AACX2C,QAAAA,OAAO,CAAC9K,IAAR,CAAa;AACX8E,UAAAA,IAAI,EAAE+B,IADK;AAEX7E,UAAAA,GAFW;AAGX0H,UAAAA,OAAO,EAAE,CAAC;AAAE3H,YAAAA,KAAF;AAASxE,YAAAA,KAAK,EAAEsJ,IAAhB;AAAsBhE,YAAAA,IAAtB;AAA4B2D,YAAAA;AAA5B,WAAD;AAHE,SAAb;AAKD;AACF,KAdD;AAgBA,WAAOsE,OAAP;AACD;;AAEDsD,EAAAA,cAAc,CAACxD,KAAD,EAAQ;AAEpB,UAAM2D,UAAU,GAAG9B,KAAK,CAAC7B,KAAD,EAAQ,KAAKrC,OAAb,CAAxB;;AAEA,UAAMiG,QAAQ,GAAG,CAAC3B,IAAD,EAAO/H,IAAP,EAAa9C,GAAb,KAAqB;AACpC,UAAI,CAAC6K,IAAI,CAACC,QAAV,EAAoB;AAClB,cAAM;AAAE3M,UAAAA,KAAF;AAAS8K,UAAAA;AAAT,YAAsB4B,IAA5B;;AAEA,cAAMnD,OAAO,GAAG,KAAK+E,YAAL,CAAkB;AAChC3P,UAAAA,GAAG,EAAE,KAAK4O,SAAL,CAAexN,GAAf,CAAmBC,KAAnB,CAD2B;AAEhC5C,UAAAA,KAAK,EAAE,KAAKsQ,QAAL,CAAchJ,sBAAd,CAAqCC,IAArC,EAA2C3E,KAA3C,CAFyB;AAGhC8K,UAAAA;AAHgC,SAAlB,CAAhB;;AAMA,YAAIvB,OAAO,IAAIA,OAAO,CAACnL,MAAvB,EAA+B;AAC7B,iBAAO,CACL;AACEyD,YAAAA,GADF;AAEE8C,YAAAA,IAFF;AAGE4E,YAAAA;AAHF,WADK,CAAP;AAOD;;AAED,eAAO,EAAP;AACD;;AAED,YAAMgF,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIxN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG0L,IAAI,CAACC,QAAL,CAAcvO,MAApC,EAA4C2C,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,IAAI,CAA1D,EAA6D;AAC3D,cAAMyN,KAAK,GAAG9B,IAAI,CAACC,QAAL,CAAc5L,CAAd,CAAd;AACA,cAAMtD,MAAM,GAAG4Q,QAAQ,CAACG,KAAD,EAAQ7J,IAAR,EAAc9C,GAAd,CAAvB;;AACA,YAAIpE,MAAM,CAACW,MAAX,EAAmB;AACjBmQ,UAAAA,GAAG,CAAC1O,IAAJ,CAAS,GAAGpC,MAAZ;AACD,SAFD,MAEO,IAAIiP,IAAI,CAACE,QAAL,KAAkBhB,eAAe,CAACC,GAAtC,EAA2C;AAChD,iBAAO,EAAP;AACD;AACF;;AACD,aAAO0C,GAAP;AACD,KAlCD;;AAoCA,UAAMzK,OAAO,GAAG,KAAK4J,QAAL,CAAc5J,OAA9B;AACA,UAAM2K,SAAS,GAAG,EAAlB;AACA,UAAM9D,OAAO,GAAG,EAAhB;AAEA7G,IAAAA,OAAO,CAACrE,OAAR,CAAgB,SAAyB;AAAA,UAAxB;AAAEqF,QAAAA,CAAC,EAAEH,IAAL;AAAW5D,QAAAA,CAAC,EAAEc;AAAd,OAAwB;;AACvC,UAAI7D,SAAS,CAAC2G,IAAD,CAAb,EAAqB;AACnB,YAAI+J,UAAU,GAAGL,QAAQ,CAACD,UAAD,EAAazJ,IAAb,EAAmB9C,GAAnB,CAAzB;;AAEA,YAAI6M,UAAU,CAACtQ,MAAf,EAAuB;AACrB;AACA,cAAI,CAACqQ,SAAS,CAAC5M,GAAD,CAAd,EAAqB;AACnB4M,YAAAA,SAAS,CAAC5M,GAAD,CAAT,GAAiB;AAAEA,cAAAA,GAAF;AAAO8C,cAAAA,IAAP;AAAa4E,cAAAA,OAAO,EAAE;AAAtB,aAAjB;AACAoB,YAAAA,OAAO,CAAC9K,IAAR,CAAa4O,SAAS,CAAC5M,GAAD,CAAtB;AACD;;AACD6M,UAAAA,UAAU,CAACjP,OAAX,CAAmB,SAAiB;AAAA,gBAAhB;AAAE8J,cAAAA;AAAF,aAAgB;AAClCkF,YAAAA,SAAS,CAAC5M,GAAD,CAAT,CAAe0H,OAAf,CAAuB1J,IAAvB,CAA4B,GAAG0J,OAA/B;AACD,WAFD;AAGD;AACF;AACF,KAfD;AAiBA,WAAOoB,OAAP;AACD;;AAEDqD,EAAAA,iBAAiB,CAACvD,KAAD,EAAQ;AACvB,UAAMK,QAAQ,GAAGY,cAAc,CAACjB,KAAD,EAAQ,KAAKrC,OAAb,CAA/B;AACA,UAAM;AAAE/I,MAAAA,IAAF;AAAQyE,MAAAA;AAAR,QAAoB,KAAK4J,QAA/B;AACA,UAAM/C,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;AACA7G,IAAAA,OAAO,CAACrE,OAAR,CAAgB,SAAyB;AAAA,UAAxB;AAAEqF,QAAAA,CAAC,EAAEH,IAAL;AAAW5D,QAAAA,CAAC,EAAEc;AAAd,OAAwB;;AACvC,UAAI,CAAC7D,SAAS,CAAC2G,IAAD,CAAd,EAAsB;AACpB;AACD;;AAED,UAAI4E,OAAO,GAAG,EAAd,CALuC,CAOvC;;AACAlK,MAAAA,IAAI,CAACI,OAAL,CAAa,CAACd,GAAD,EAAMoG,QAAN,KAAmB;AAC9BwE,QAAAA,OAAO,CAAC1J,IAAR,CACE,GAAG,KAAKyO,YAAL,CAAkB;AACnB3P,UAAAA,GADmB;AAEnBvB,UAAAA,KAAK,EAAEuH,IAAI,CAACI,QAAD,CAFQ;AAGnB+F,UAAAA;AAHmB,SAAlB,CADL;AAOD,OARD;;AAUA,UAAIvB,OAAO,CAACnL,MAAZ,EAAoB;AAClBuM,QAAAA,OAAO,CAAC9K,IAAR,CAAa;AACXgC,UAAAA,GADW;AAEX8C,UAAAA,IAFW;AAGX4E,UAAAA;AAHW,SAAb;AAKD;AACF,KAzBD;AA2BA,WAAOoB,OAAP;AACD;;AACD2D,EAAAA,YAAY,QAA2B;AAAA,QAA1B;AAAE3P,MAAAA,GAAF;AAAOvB,MAAAA,KAAP;AAAc0N,MAAAA;AAAd,KAA0B;;AACrC,QAAI,CAAC9M,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB,aAAO,EAAP;AACD;;AAED,QAAImM,OAAO,GAAG,EAAd;;AAEA,QAAIpM,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBA,MAAAA,KAAK,CAACqC,OAAN,CAAc,SAAkC;AAAA,YAAjC;AAAEoF,UAAAA,CAAC,EAAE6B,IAAL;AAAW3F,UAAAA,CAAC,EAAEc,GAAd;AAAmBuB,UAAAA,CAAC,EAAEV;AAAtB,SAAiC;;AAC9C,YAAI,CAAC1E,SAAS,CAAC0I,IAAD,CAAd,EAAsB;AACpB;AACD;;AAED,cAAM;AAAEsB,UAAAA,OAAF;AAAWpG,UAAAA,KAAX;AAAkByE,UAAAA;AAAlB,YAA8ByE,QAAQ,CAAClC,QAAT,CAAkBlC,IAAlB,CAApC;;AAEA,YAAIsB,OAAJ,EAAa;AACXuB,UAAAA,OAAO,CAAC1J,IAAR,CAAa;AACX+B,YAAAA,KADW;AAEXjD,YAAAA,GAFW;AAGXvB,YAAAA,KAAK,EAAEsJ,IAHI;AAIX7E,YAAAA,GAJW;AAKXa,YAAAA,IALW;AAMX2D,YAAAA;AANW,WAAb;AAQD;AACF,OAjBD;AAkBD,KAnBD,MAmBO;AACL,YAAM;AAAExB,QAAAA,CAAC,EAAE6B,IAAL;AAAWtD,QAAAA,CAAC,EAAEV;AAAd,UAAuBtF,KAA7B;AAEA,YAAM;AAAE4K,QAAAA,OAAF;AAAWpG,QAAAA,KAAX;AAAkByE,QAAAA;AAAlB,UAA8ByE,QAAQ,CAAClC,QAAT,CAAkBlC,IAAlB,CAApC;;AAEA,UAAIsB,OAAJ,EAAa;AACXuB,QAAAA,OAAO,CAAC1J,IAAR,CAAa;AAAE+B,UAAAA,KAAF;AAASjD,UAAAA,GAAT;AAAcvB,UAAAA,KAAK,EAAEsJ,IAArB;AAA2BhE,UAAAA,IAA3B;AAAiC2D,UAAAA;AAAjC,SAAb;AACD;AACF;;AAED,WAAOkD,OAAP;AACD;;AAlQQ;;AAqQX+D,IAAI,CAACqB,OAAL,GAAe,OAAf;AACArB,IAAI,CAAChI,WAAL,GAAmBA,WAAnB;AACAgI,IAAI,CAAC7H,UAAL,GAAkBA,UAAlB;AACA6H,IAAI,CAACsB,MAAL,GAAcpM,MAAd;AAEA;AACE8K,EAAAA,IAAI,CAAC9C,UAAL,GAAkB8B,KAAlB;AACD;AAED;AACEb,EAAAA,QAAQ,CAACP,cAAD,CAAR;AACD;AAED,SAASoC,IAAI,IAAIuB,OAAjB","sourcesContent":["/**\r\n * Fuse.js v6.5.3 - Lightweight fuzzy-search (http://fusejs.io)\r\n *\r\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\r\n * All Rights Reserved. Apache Software License 2.0\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n\r\nfunction isArray(value) {\r\n  return !Array.isArray\r\n    ? getTag(value) === '[object Array]'\r\n    : Array.isArray(value)\r\n}\r\n\r\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\r\nconst INFINITY = 1 / 0;\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value\r\n  }\r\n  let result = value + '';\r\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\r\n}\r\n\r\nfunction toString(value) {\r\n  return value == null ? '' : baseToString(value)\r\n}\r\n\r\nfunction isString(value) {\r\n  return typeof value === 'string'\r\n}\r\n\r\nfunction isNumber(value) {\r\n  return typeof value === 'number'\r\n}\r\n\r\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\r\nfunction isBoolean(value) {\r\n  return (\r\n    value === true ||\r\n    value === false ||\r\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\r\n  )\r\n}\r\n\r\nfunction isObject(value) {\r\n  return typeof value === 'object'\r\n}\r\n\r\n// Checks if `value` is object-like.\r\nfunction isObjectLike(value) {\r\n  return isObject(value) && value !== null\r\n}\r\n\r\nfunction isDefined(value) {\r\n  return value !== undefined && value !== null\r\n}\r\n\r\nfunction isBlank(value) {\r\n  return !value.trim().length\r\n}\r\n\r\n// Gets the `toStringTag` of `value`.\r\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\r\nfunction getTag(value) {\r\n  return value == null\r\n    ? value === undefined\r\n      ? '[object Undefined]'\r\n      : '[object Null]'\r\n    : Object.prototype.toString.call(value)\r\n}\r\n\r\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\r\n\r\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\r\n\r\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\r\n  `Invalid value for key ${key}`;\r\n\r\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\r\n  `Pattern length exceeds max of ${max}.`;\r\n\r\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\r\n\r\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\r\n  `Property 'weight' in key '${key}' must be a positive integer`;\r\n\r\nconst hasOwn = Object.prototype.hasOwnProperty;\r\n\r\nclass KeyStore {\r\n  constructor(keys) {\r\n    this._keys = [];\r\n    this._keyMap = {};\r\n\r\n    let totalWeight = 0;\r\n\r\n    keys.forEach((key) => {\r\n      let obj = createKey(key);\r\n\r\n      totalWeight += obj.weight;\r\n\r\n      this._keys.push(obj);\r\n      this._keyMap[obj.id] = obj;\r\n\r\n      totalWeight += obj.weight;\r\n    });\r\n\r\n    // Normalize weights so that their sum is equal to 1\r\n    this._keys.forEach((key) => {\r\n      key.weight /= totalWeight;\r\n    });\r\n  }\r\n  get(keyId) {\r\n    return this._keyMap[keyId]\r\n  }\r\n  keys() {\r\n    return this._keys\r\n  }\r\n  toJSON() {\r\n    return JSON.stringify(this._keys)\r\n  }\r\n}\r\n\r\nfunction createKey(key) {\r\n  let path = null;\r\n  let id = null;\r\n  let src = null;\r\n  let weight = 1;\r\n\r\n  if (isString(key) || isArray(key)) {\r\n    src = key;\r\n    path = createKeyPath(key);\r\n    id = createKeyId(key);\r\n  } else {\r\n    if (!hasOwn.call(key, 'name')) {\r\n      throw new Error(MISSING_KEY_PROPERTY('name'))\r\n    }\r\n\r\n    const name = key.name;\r\n    src = name;\r\n\r\n    if (hasOwn.call(key, 'weight')) {\r\n      weight = key.weight;\r\n\r\n      if (weight <= 0) {\r\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\r\n      }\r\n    }\r\n\r\n    path = createKeyPath(name);\r\n    id = createKeyId(name);\r\n  }\r\n\r\n  return { path, id, weight, src }\r\n}\r\n\r\nfunction createKeyPath(key) {\r\n  return isArray(key) ? key : key.split('.')\r\n}\r\n\r\nfunction createKeyId(key) {\r\n  return isArray(key) ? key.join('.') : key\r\n}\r\n\r\nfunction get(obj, path) {\r\n  let list = [];\r\n  let arr = false;\r\n\r\n  const deepGet = (obj, path, index) => {\r\n    if (!isDefined(obj)) {\r\n      return\r\n    }\r\n    if (!path[index]) {\r\n      // If there's no path left, we've arrived at the object we care about.\r\n      list.push(obj);\r\n    } else {\r\n      let key = path[index];\r\n\r\n      const value = obj[key];\r\n\r\n      if (!isDefined(value)) {\r\n        return\r\n      }\r\n\r\n      // If we're at the last value in the path, and if it's a string/number/bool,\r\n      // add it to the list\r\n      if (\r\n        index === path.length - 1 &&\r\n        (isString(value) || isNumber(value) || isBoolean(value))\r\n      ) {\r\n        list.push(toString(value));\r\n      } else if (isArray(value)) {\r\n        arr = true;\r\n        // Search each item in the array.\r\n        for (let i = 0, len = value.length; i < len; i += 1) {\r\n          deepGet(value[i], path, index + 1);\r\n        }\r\n      } else if (path.length) {\r\n        // An object. Recurse further.\r\n        deepGet(value, path, index + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Backwards compatibility (since path used to be a string)\r\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\r\n\r\n  return arr ? list : list[0]\r\n}\r\n\r\nconst MatchOptions = {\r\n  // Whether the matches should be included in the result set. When `true`, each record in the result\r\n  // set will include the indices of the matched characters.\r\n  // These can consequently be used for highlighting purposes.\r\n  includeMatches: false,\r\n  // When `true`, the matching function will continue to the end of a search pattern even if\r\n  // a perfect match has already been located in the string.\r\n  findAllMatches: false,\r\n  // Minimum number of characters that must be matched before a result is considered a match\r\n  minMatchCharLength: 1\r\n};\r\n\r\nconst BasicOptions = {\r\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\r\n  // match is found before the end of the same input.\r\n  isCaseSensitive: false,\r\n  // When true, the matching function will continue to the end of a search pattern even if\r\n  includeScore: false,\r\n  // List of properties that will be searched. This also supports nested properties.\r\n  keys: [],\r\n  // Whether to sort the result list, by score\r\n  shouldSort: true,\r\n  // Default sort function: sort by ascending score, ascending index\r\n  sortFn: (a, b) =>\r\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\r\n};\r\n\r\nconst FuzzyOptions = {\r\n  // Approximately where in the text is the pattern expected to be found?\r\n  location: 0,\r\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\r\n  // (of both letters and location), a threshold of '1.0' would match anything.\r\n  threshold: 0.6,\r\n  // Determines how close the match must be to the fuzzy location (specified above).\r\n  // An exact letter match which is 'distance' characters away from the fuzzy location\r\n  // would score as a complete mismatch. A distance of '0' requires the match be at\r\n  // the exact location specified, a threshold of '1000' would require a perfect match\r\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\r\n  distance: 100\r\n};\r\n\r\nconst AdvancedOptions = {\r\n  // When `true`, it enables the use of unix-like search commands\r\n  useExtendedSearch: false,\r\n  // The get function to use when fetching an object's properties.\r\n  // The default will search nested paths *ie foo.bar.baz*\r\n  getFn: get,\r\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\r\n  // where in the string the pattern appears.\r\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\r\n  ignoreLocation: false,\r\n  // When `true`, the calculation for the relevance score (used for sorting) will\r\n  // ignore the field-length norm.\r\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\r\n  ignoreFieldNorm: false,\r\n  // The weight to determine how much field length norm effects scoring.\r\n  fieldNormWeight: 1\r\n};\r\n\r\nvar Config = {\r\n  ...BasicOptions,\r\n  ...MatchOptions,\r\n  ...FuzzyOptions,\r\n  ...AdvancedOptions\r\n};\r\n\r\nconst SPACE = /[^ ]+/g;\r\n\r\n// Field-length norm: the shorter the field, the higher the weight.\r\n// Set to 3 decimals to reduce index size.\r\nfunction norm(weight = 1, mantissa = 3) {\r\n  const cache = new Map();\r\n  const m = Math.pow(10, mantissa);\r\n\r\n  return {\r\n    get(value) {\r\n      const numTokens = value.match(SPACE).length;\r\n\r\n      if (cache.has(numTokens)) {\r\n        return cache.get(numTokens)\r\n      }\r\n\r\n      // Default function is 1/sqrt(x), weight makes that variable\r\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\r\n\r\n      // In place of `toFixed(mantissa)`, for faster computation\r\n      const n = parseFloat(Math.round(norm * m) / m);\r\n\r\n      cache.set(numTokens, n);\r\n\r\n      return n\r\n    },\r\n    clear() {\r\n      cache.clear();\r\n    }\r\n  }\r\n}\r\n\r\nclass FuseIndex {\r\n  constructor({\r\n    getFn = Config.getFn,\r\n    fieldNormWeight = Config.fieldNormWeight\r\n  } = {}) {\r\n    this.norm = norm(fieldNormWeight, 3);\r\n    this.getFn = getFn;\r\n    this.isCreated = false;\r\n\r\n    this.setIndexRecords();\r\n  }\r\n  setSources(docs = []) {\r\n    this.docs = docs;\r\n  }\r\n  setIndexRecords(records = []) {\r\n    this.records = records;\r\n  }\r\n  setKeys(keys = []) {\r\n    this.keys = keys;\r\n    this._keysMap = {};\r\n    keys.forEach((key, idx) => {\r\n      this._keysMap[key.id] = idx;\r\n    });\r\n  }\r\n  create() {\r\n    if (this.isCreated || !this.docs.length) {\r\n      return\r\n    }\r\n\r\n    this.isCreated = true;\r\n\r\n    // List is Array<String>\r\n    if (isString(this.docs[0])) {\r\n      this.docs.forEach((doc, docIndex) => {\r\n        this._addString(doc, docIndex);\r\n      });\r\n    } else {\r\n      // List is Array<Object>\r\n      this.docs.forEach((doc, docIndex) => {\r\n        this._addObject(doc, docIndex);\r\n      });\r\n    }\r\n\r\n    this.norm.clear();\r\n  }\r\n  // Adds a doc to the end of the index\r\n  add(doc) {\r\n    const idx = this.size();\r\n\r\n    if (isString(doc)) {\r\n      this._addString(doc, idx);\r\n    } else {\r\n      this._addObject(doc, idx);\r\n    }\r\n  }\r\n  // Removes the doc at the specified index of the index\r\n  removeAt(idx) {\r\n    this.records.splice(idx, 1);\r\n\r\n    // Change ref index of every subsquent doc\r\n    for (let i = idx, len = this.size(); i < len; i += 1) {\r\n      this.records[i].i -= 1;\r\n    }\r\n  }\r\n  getValueForItemAtKeyId(item, keyId) {\r\n    return item[this._keysMap[keyId]]\r\n  }\r\n  size() {\r\n    return this.records.length\r\n  }\r\n  _addString(doc, docIndex) {\r\n    if (!isDefined(doc) || isBlank(doc)) {\r\n      return\r\n    }\r\n\r\n    let record = {\r\n      v: doc,\r\n      i: docIndex,\r\n      n: this.norm.get(doc)\r\n    };\r\n\r\n    this.records.push(record);\r\n  }\r\n  _addObject(doc, docIndex) {\r\n    let record = { i: docIndex, $: {} };\r\n\r\n    // Iterate over every key (i.e, path), and fetch the value at that key\r\n    this.keys.forEach((key, keyIndex) => {\r\n      // console.log(key)\r\n      let value = this.getFn(doc, key.path);\r\n\r\n      if (!isDefined(value)) {\r\n        return\r\n      }\r\n\r\n      if (isArray(value)) {\r\n        let subRecords = [];\r\n        const stack = [{ nestedArrIndex: -1, value }];\r\n\r\n        while (stack.length) {\r\n          const { nestedArrIndex, value } = stack.pop();\r\n\r\n          if (!isDefined(value)) {\r\n            continue\r\n          }\r\n\r\n          if (isString(value) && !isBlank(value)) {\r\n            let subRecord = {\r\n              v: value,\r\n              i: nestedArrIndex,\r\n              n: this.norm.get(value)\r\n            };\r\n\r\n            subRecords.push(subRecord);\r\n          } else if (isArray(value)) {\r\n            value.forEach((item, k) => {\r\n              stack.push({\r\n                nestedArrIndex: k,\r\n                value: item\r\n              });\r\n            });\r\n          } else ;\r\n        }\r\n        record.$[keyIndex] = subRecords;\r\n      } else if (!isBlank(value)) {\r\n        let subRecord = {\r\n          v: value,\r\n          n: this.norm.get(value)\r\n        };\r\n\r\n        record.$[keyIndex] = subRecord;\r\n      }\r\n    });\r\n\r\n    this.records.push(record);\r\n  }\r\n  toJSON() {\r\n    return {\r\n      keys: this.keys,\r\n      records: this.records\r\n    }\r\n  }\r\n}\r\n\r\nfunction createIndex(\r\n  keys,\r\n  docs,\r\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\r\n) {\r\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\r\n  myIndex.setKeys(keys.map(createKey));\r\n  myIndex.setSources(docs);\r\n  myIndex.create();\r\n  return myIndex\r\n}\r\n\r\nfunction parseIndex(\r\n  data,\r\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\r\n) {\r\n  const { keys, records } = data;\r\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\r\n  myIndex.setKeys(keys);\r\n  myIndex.setIndexRecords(records);\r\n  return myIndex\r\n}\r\n\r\nfunction computeScore$1(\r\n  pattern,\r\n  {\r\n    errors = 0,\r\n    currentLocation = 0,\r\n    expectedLocation = 0,\r\n    distance = Config.distance,\r\n    ignoreLocation = Config.ignoreLocation\r\n  } = {}\r\n) {\r\n  const accuracy = errors / pattern.length;\r\n\r\n  if (ignoreLocation) {\r\n    return accuracy\r\n  }\r\n\r\n  const proximity = Math.abs(expectedLocation - currentLocation);\r\n\r\n  if (!distance) {\r\n    // Dodge divide by zero error.\r\n    return proximity ? 1.0 : accuracy\r\n  }\r\n\r\n  return accuracy + proximity / distance\r\n}\r\n\r\nfunction convertMaskToIndices(\r\n  matchmask = [],\r\n  minMatchCharLength = Config.minMatchCharLength\r\n) {\r\n  let indices = [];\r\n  let start = -1;\r\n  let end = -1;\r\n  let i = 0;\r\n\r\n  for (let len = matchmask.length; i < len; i += 1) {\r\n    let match = matchmask[i];\r\n    if (match && start === -1) {\r\n      start = i;\r\n    } else if (!match && start !== -1) {\r\n      end = i - 1;\r\n      if (end - start + 1 >= minMatchCharLength) {\r\n        indices.push([start, end]);\r\n      }\r\n      start = -1;\r\n    }\r\n  }\r\n\r\n  // (i-1 - start) + 1 => i - start\r\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\r\n    indices.push([start, i - 1]);\r\n  }\r\n\r\n  return indices\r\n}\r\n\r\n// Machine word size\r\nconst MAX_BITS = 32;\r\n\r\nfunction search(\r\n  text,\r\n  pattern,\r\n  patternAlphabet,\r\n  {\r\n    location = Config.location,\r\n    distance = Config.distance,\r\n    threshold = Config.threshold,\r\n    findAllMatches = Config.findAllMatches,\r\n    minMatchCharLength = Config.minMatchCharLength,\r\n    includeMatches = Config.includeMatches,\r\n    ignoreLocation = Config.ignoreLocation\r\n  } = {}\r\n) {\r\n  if (pattern.length > MAX_BITS) {\r\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\r\n  }\r\n\r\n  const patternLen = pattern.length;\r\n  // Set starting location at beginning text and initialize the alphabet.\r\n  const textLen = text.length;\r\n  // Handle the case when location > text.length\r\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\r\n  // Highest score beyond which we give up.\r\n  let currentThreshold = threshold;\r\n  // Is there a nearby exact match? (speedup)\r\n  let bestLocation = expectedLocation;\r\n\r\n  // Performance: only computer matches when the minMatchCharLength > 1\r\n  // OR if `includeMatches` is true.\r\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\r\n  // A mask of the matches, used for building the indices\r\n  const matchMask = computeMatches ? Array(textLen) : [];\r\n\r\n  let index;\r\n\r\n  // Get all exact matches, here for speed up\r\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\r\n    let score = computeScore$1(pattern, {\r\n      currentLocation: index,\r\n      expectedLocation,\r\n      distance,\r\n      ignoreLocation\r\n    });\r\n\r\n    currentThreshold = Math.min(score, currentThreshold);\r\n    bestLocation = index + patternLen;\r\n\r\n    if (computeMatches) {\r\n      let i = 0;\r\n      while (i < patternLen) {\r\n        matchMask[index + i] = 1;\r\n        i += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reset the best location\r\n  bestLocation = -1;\r\n\r\n  let lastBitArr = [];\r\n  let finalScore = 1;\r\n  let binMax = patternLen + textLen;\r\n\r\n  const mask = 1 << (patternLen - 1);\r\n\r\n  for (let i = 0; i < patternLen; i += 1) {\r\n    // Scan for the best match; each iteration allows for one more error.\r\n    // Run a binary search to determine how far from the match location we can stray\r\n    // at this error level.\r\n    let binMin = 0;\r\n    let binMid = binMax;\r\n\r\n    while (binMin < binMid) {\r\n      const score = computeScore$1(pattern, {\r\n        errors: i,\r\n        currentLocation: expectedLocation + binMid,\r\n        expectedLocation,\r\n        distance,\r\n        ignoreLocation\r\n      });\r\n\r\n      if (score <= currentThreshold) {\r\n        binMin = binMid;\r\n      } else {\r\n        binMax = binMid;\r\n      }\r\n\r\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n    }\r\n\r\n    // Use the result from this iteration as the maximum for the next.\r\n    binMax = binMid;\r\n\r\n    let start = Math.max(1, expectedLocation - binMid + 1);\r\n    let finish = findAllMatches\r\n      ? textLen\r\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\r\n\r\n    // Initialize the bit array\r\n    let bitArr = Array(finish + 2);\r\n\r\n    bitArr[finish + 1] = (1 << i) - 1;\r\n\r\n    for (let j = finish; j >= start; j -= 1) {\r\n      let currentLocation = j - 1;\r\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\r\n\r\n      if (computeMatches) {\r\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\r\n        matchMask[currentLocation] = +!!charMatch;\r\n      }\r\n\r\n      // First pass: exact match\r\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\r\n\r\n      // Subsequent passes: fuzzy match\r\n      if (i) {\r\n        bitArr[j] |=\r\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\r\n      }\r\n\r\n      if (bitArr[j] & mask) {\r\n        finalScore = computeScore$1(pattern, {\r\n          errors: i,\r\n          currentLocation,\r\n          expectedLocation,\r\n          distance,\r\n          ignoreLocation\r\n        });\r\n\r\n        // This match will almost certainly be better than any existing match.\r\n        // But check anyway.\r\n        if (finalScore <= currentThreshold) {\r\n          // Indeed it is\r\n          currentThreshold = finalScore;\r\n          bestLocation = currentLocation;\r\n\r\n          // Already passed `loc`, downhill from here on in.\r\n          if (bestLocation <= expectedLocation) {\r\n            break\r\n          }\r\n\r\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\r\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\r\n        }\r\n      }\r\n    }\r\n\r\n    // No hope for a (better) match at greater error levels.\r\n    const score = computeScore$1(pattern, {\r\n      errors: i + 1,\r\n      currentLocation: expectedLocation,\r\n      expectedLocation,\r\n      distance,\r\n      ignoreLocation\r\n    });\r\n\r\n    if (score > currentThreshold) {\r\n      break\r\n    }\r\n\r\n    lastBitArr = bitArr;\r\n  }\r\n\r\n  const result = {\r\n    isMatch: bestLocation >= 0,\r\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\r\n    score: Math.max(0.001, finalScore)\r\n  };\r\n\r\n  if (computeMatches) {\r\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\r\n    if (!indices.length) {\r\n      result.isMatch = false;\r\n    } else if (includeMatches) {\r\n      result.indices = indices;\r\n    }\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction createPatternAlphabet(pattern) {\r\n  let mask = {};\r\n\r\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\r\n    const char = pattern.charAt(i);\r\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\r\n  }\r\n\r\n  return mask\r\n}\r\n\r\nclass BitapSearch {\r\n  constructor(\r\n    pattern,\r\n    {\r\n      location = Config.location,\r\n      threshold = Config.threshold,\r\n      distance = Config.distance,\r\n      includeMatches = Config.includeMatches,\r\n      findAllMatches = Config.findAllMatches,\r\n      minMatchCharLength = Config.minMatchCharLength,\r\n      isCaseSensitive = Config.isCaseSensitive,\r\n      ignoreLocation = Config.ignoreLocation\r\n    } = {}\r\n  ) {\r\n    this.options = {\r\n      location,\r\n      threshold,\r\n      distance,\r\n      includeMatches,\r\n      findAllMatches,\r\n      minMatchCharLength,\r\n      isCaseSensitive,\r\n      ignoreLocation\r\n    };\r\n\r\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\r\n\r\n    this.chunks = [];\r\n\r\n    if (!this.pattern.length) {\r\n      return\r\n    }\r\n\r\n    const addChunk = (pattern, startIndex) => {\r\n      this.chunks.push({\r\n        pattern,\r\n        alphabet: createPatternAlphabet(pattern),\r\n        startIndex\r\n      });\r\n    };\r\n\r\n    const len = this.pattern.length;\r\n\r\n    if (len > MAX_BITS) {\r\n      let i = 0;\r\n      const remainder = len % MAX_BITS;\r\n      const end = len - remainder;\r\n\r\n      while (i < end) {\r\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\r\n        i += MAX_BITS;\r\n      }\r\n\r\n      if (remainder) {\r\n        const startIndex = len - MAX_BITS;\r\n        addChunk(this.pattern.substr(startIndex), startIndex);\r\n      }\r\n    } else {\r\n      addChunk(this.pattern, 0);\r\n    }\r\n  }\r\n\r\n  searchIn(text) {\r\n    const { isCaseSensitive, includeMatches } = this.options;\r\n\r\n    if (!isCaseSensitive) {\r\n      text = text.toLowerCase();\r\n    }\r\n\r\n    // Exact match\r\n    if (this.pattern === text) {\r\n      let result = {\r\n        isMatch: true,\r\n        score: 0\r\n      };\r\n\r\n      if (includeMatches) {\r\n        result.indices = [[0, text.length - 1]];\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    // Otherwise, use Bitap algorithm\r\n    const {\r\n      location,\r\n      distance,\r\n      threshold,\r\n      findAllMatches,\r\n      minMatchCharLength,\r\n      ignoreLocation\r\n    } = this.options;\r\n\r\n    let allIndices = [];\r\n    let totalScore = 0;\r\n    let hasMatches = false;\r\n\r\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\r\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\r\n        location: location + startIndex,\r\n        distance,\r\n        threshold,\r\n        findAllMatches,\r\n        minMatchCharLength,\r\n        includeMatches,\r\n        ignoreLocation\r\n      });\r\n\r\n      if (isMatch) {\r\n        hasMatches = true;\r\n      }\r\n\r\n      totalScore += score;\r\n\r\n      if (isMatch && indices) {\r\n        allIndices = [...allIndices, ...indices];\r\n      }\r\n    });\r\n\r\n    let result = {\r\n      isMatch: hasMatches,\r\n      score: hasMatches ? totalScore / this.chunks.length : 1\r\n    };\r\n\r\n    if (hasMatches && includeMatches) {\r\n      result.indices = allIndices;\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n\r\nclass BaseMatch {\r\n  constructor(pattern) {\r\n    this.pattern = pattern;\r\n  }\r\n  static isMultiMatch(pattern) {\r\n    return getMatch(pattern, this.multiRegex)\r\n  }\r\n  static isSingleMatch(pattern) {\r\n    return getMatch(pattern, this.singleRegex)\r\n  }\r\n  search(/*text*/) {}\r\n}\r\n\r\nfunction getMatch(pattern, exp) {\r\n  const matches = pattern.match(exp);\r\n  return matches ? matches[1] : null\r\n}\r\n\r\n// Token: 'file\r\n\r\nclass ExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^=\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^=(.*)$/\r\n  }\r\n  search(text) {\r\n    const isMatch = text === this.pattern;\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [0, this.pattern.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\n// Token: !fire\r\n\r\nclass InverseExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'inverse-exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^!\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^!(.*)$/\r\n  }\r\n  search(text) {\r\n    const index = text.indexOf(this.pattern);\r\n    const isMatch = index === -1;\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [0, text.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\n// Token: ^file\r\n\r\nclass PrefixExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'prefix-exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^\\^\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^\\^(.*)$/\r\n  }\r\n  search(text) {\r\n    const isMatch = text.startsWith(this.pattern);\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [0, this.pattern.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\n// Token: !^fire\r\n\r\nclass InversePrefixExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'inverse-prefix-exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^!\\^\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^!\\^(.*)$/\r\n  }\r\n  search(text) {\r\n    const isMatch = !text.startsWith(this.pattern);\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [0, text.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\n// Token: .file$\r\n\r\nclass SuffixExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'suffix-exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^\"(.*)\"\\$$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^(.*)\\$$/\r\n  }\r\n  search(text) {\r\n    const isMatch = text.endsWith(this.pattern);\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [text.length - this.pattern.length, text.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\n// Token: !.file$\r\n\r\nclass InverseSuffixExactMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'inverse-suffix-exact'\r\n  }\r\n  static get multiRegex() {\r\n    return /^!\"(.*)\"\\$$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^!(.*)\\$$/\r\n  }\r\n  search(text) {\r\n    const isMatch = !text.endsWith(this.pattern);\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices: [0, text.length - 1]\r\n    }\r\n  }\r\n}\r\n\r\nclass FuzzyMatch extends BaseMatch {\r\n  constructor(\r\n    pattern,\r\n    {\r\n      location = Config.location,\r\n      threshold = Config.threshold,\r\n      distance = Config.distance,\r\n      includeMatches = Config.includeMatches,\r\n      findAllMatches = Config.findAllMatches,\r\n      minMatchCharLength = Config.minMatchCharLength,\r\n      isCaseSensitive = Config.isCaseSensitive,\r\n      ignoreLocation = Config.ignoreLocation\r\n    } = {}\r\n  ) {\r\n    super(pattern);\r\n    this._bitapSearch = new BitapSearch(pattern, {\r\n      location,\r\n      threshold,\r\n      distance,\r\n      includeMatches,\r\n      findAllMatches,\r\n      minMatchCharLength,\r\n      isCaseSensitive,\r\n      ignoreLocation\r\n    });\r\n  }\r\n  static get type() {\r\n    return 'fuzzy'\r\n  }\r\n  static get multiRegex() {\r\n    return /^\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^(.*)$/\r\n  }\r\n  search(text) {\r\n    return this._bitapSearch.searchIn(text)\r\n  }\r\n}\r\n\r\n// Token: 'file\r\n\r\nclass IncludeMatch extends BaseMatch {\r\n  constructor(pattern) {\r\n    super(pattern);\r\n  }\r\n  static get type() {\r\n    return 'include'\r\n  }\r\n  static get multiRegex() {\r\n    return /^'\"(.*)\"$/\r\n  }\r\n  static get singleRegex() {\r\n    return /^'(.*)$/\r\n  }\r\n  search(text) {\r\n    let location = 0;\r\n    let index;\r\n\r\n    const indices = [];\r\n    const patternLen = this.pattern.length;\r\n\r\n    // Get all exact matches\r\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\r\n      location = index + patternLen;\r\n      indices.push([index, location - 1]);\r\n    }\r\n\r\n    const isMatch = !!indices.length;\r\n\r\n    return {\r\n      isMatch,\r\n      score: isMatch ? 0 : 1,\r\n      indices\r\n    }\r\n  }\r\n}\r\n\r\n// ❗Order is important. DO NOT CHANGE.\r\nconst searchers = [\r\n  ExactMatch,\r\n  IncludeMatch,\r\n  PrefixExactMatch,\r\n  InversePrefixExactMatch,\r\n  InverseSuffixExactMatch,\r\n  SuffixExactMatch,\r\n  InverseExactMatch,\r\n  FuzzyMatch\r\n];\r\n\r\nconst searchersLen = searchers.length;\r\n\r\n// Regex to split by spaces, but keep anything in quotes together\r\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\r\nconst OR_TOKEN = '|';\r\n\r\n// Return a 2D array representation of the query, for simpler parsing.\r\n// Example:\r\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\r\nfunction parseQuery(pattern, options = {}) {\r\n  return pattern.split(OR_TOKEN).map((item) => {\r\n    let query = item\r\n      .trim()\r\n      .split(SPACE_RE)\r\n      .filter((item) => item && !!item.trim());\r\n\r\n    let results = [];\r\n    for (let i = 0, len = query.length; i < len; i += 1) {\r\n      const queryItem = query[i];\r\n\r\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\r\n      let found = false;\r\n      let idx = -1;\r\n      while (!found && ++idx < searchersLen) {\r\n        const searcher = searchers[idx];\r\n        let token = searcher.isMultiMatch(queryItem);\r\n        if (token) {\r\n          results.push(new searcher(token, options));\r\n          found = true;\r\n        }\r\n      }\r\n\r\n      if (found) {\r\n        continue\r\n      }\r\n\r\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\r\n      idx = -1;\r\n      while (++idx < searchersLen) {\r\n        const searcher = searchers[idx];\r\n        let token = searcher.isSingleMatch(queryItem);\r\n        if (token) {\r\n          results.push(new searcher(token, options));\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    return results\r\n  })\r\n}\r\n\r\n// These extended matchers can return an array of matches, as opposed\r\n// to a singl match\r\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\r\n\r\n/**\r\n * Command-like searching\r\n * ======================\r\n *\r\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\r\n * search in a given text.\r\n *\r\n * Search syntax:\r\n *\r\n * | Token       | Match type                 | Description                            |\r\n * | ----------- | -------------------------- | -------------------------------------- |\r\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\r\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\r\n * | `'python`   | include-match              | Items that include `python`            |\r\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\r\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\r\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\r\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\r\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\r\n *\r\n * A single pipe character acts as an OR operator. For example, the following\r\n * query matches entries that start with `core` and end with either`go`, `rb`,\r\n * or`py`.\r\n *\r\n * ```\r\n * ^core go$ | rb$ | py$\r\n * ```\r\n */\r\nclass ExtendedSearch {\r\n  constructor(\r\n    pattern,\r\n    {\r\n      isCaseSensitive = Config.isCaseSensitive,\r\n      includeMatches = Config.includeMatches,\r\n      minMatchCharLength = Config.minMatchCharLength,\r\n      ignoreLocation = Config.ignoreLocation,\r\n      findAllMatches = Config.findAllMatches,\r\n      location = Config.location,\r\n      threshold = Config.threshold,\r\n      distance = Config.distance\r\n    } = {}\r\n  ) {\r\n    this.query = null;\r\n    this.options = {\r\n      isCaseSensitive,\r\n      includeMatches,\r\n      minMatchCharLength,\r\n      findAllMatches,\r\n      ignoreLocation,\r\n      location,\r\n      threshold,\r\n      distance\r\n    };\r\n\r\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\r\n    this.query = parseQuery(this.pattern, this.options);\r\n  }\r\n\r\n  static condition(_, options) {\r\n    return options.useExtendedSearch\r\n  }\r\n\r\n  searchIn(text) {\r\n    const query = this.query;\r\n\r\n    if (!query) {\r\n      return {\r\n        isMatch: false,\r\n        score: 1\r\n      }\r\n    }\r\n\r\n    const { includeMatches, isCaseSensitive } = this.options;\r\n\r\n    text = isCaseSensitive ? text : text.toLowerCase();\r\n\r\n    let numMatches = 0;\r\n    let allIndices = [];\r\n    let totalScore = 0;\r\n\r\n    // ORs\r\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\r\n      const searchers = query[i];\r\n\r\n      // Reset indices\r\n      allIndices.length = 0;\r\n      numMatches = 0;\r\n\r\n      // ANDs\r\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\r\n        const searcher = searchers[j];\r\n        const { isMatch, indices, score } = searcher.search(text);\r\n\r\n        if (isMatch) {\r\n          numMatches += 1;\r\n          totalScore += score;\r\n          if (includeMatches) {\r\n            const type = searcher.constructor.type;\r\n            if (MultiMatchSet.has(type)) {\r\n              allIndices = [...allIndices, ...indices];\r\n            } else {\r\n              allIndices.push(indices);\r\n            }\r\n          }\r\n        } else {\r\n          totalScore = 0;\r\n          numMatches = 0;\r\n          allIndices.length = 0;\r\n          break\r\n        }\r\n      }\r\n\r\n      // OR condition, so if TRUE, return\r\n      if (numMatches) {\r\n        let result = {\r\n          isMatch: true,\r\n          score: totalScore / numMatches\r\n        };\r\n\r\n        if (includeMatches) {\r\n          result.indices = allIndices;\r\n        }\r\n\r\n        return result\r\n      }\r\n    }\r\n\r\n    // Nothing was matched\r\n    return {\r\n      isMatch: false,\r\n      score: 1\r\n    }\r\n  }\r\n}\r\n\r\nconst registeredSearchers = [];\r\n\r\nfunction register(...args) {\r\n  registeredSearchers.push(...args);\r\n}\r\n\r\nfunction createSearcher(pattern, options) {\r\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\r\n    let searcherClass = registeredSearchers[i];\r\n    if (searcherClass.condition(pattern, options)) {\r\n      return new searcherClass(pattern, options)\r\n    }\r\n  }\r\n\r\n  return new BitapSearch(pattern, options)\r\n}\r\n\r\nconst LogicalOperator = {\r\n  AND: '$and',\r\n  OR: '$or'\r\n};\r\n\r\nconst KeyType = {\r\n  PATH: '$path',\r\n  PATTERN: '$val'\r\n};\r\n\r\nconst isExpression = (query) =>\r\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\r\n\r\nconst isPath = (query) => !!query[KeyType.PATH];\r\n\r\nconst isLeaf = (query) =>\r\n  !isArray(query) && isObject(query) && !isExpression(query);\r\n\r\nconst convertToExplicit = (query) => ({\r\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\r\n    [key]: query[key]\r\n  }))\r\n});\r\n\r\n// When `auto` is `true`, the parse function will infer and initialize and add\r\n// the appropriate `Searcher` instance\r\nfunction parse(query, options, { auto = true } = {}) {\r\n  const next = (query) => {\r\n    let keys = Object.keys(query);\r\n\r\n    const isQueryPath = isPath(query);\r\n\r\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\r\n      return next(convertToExplicit(query))\r\n    }\r\n\r\n    if (isLeaf(query)) {\r\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\r\n\r\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\r\n\r\n      if (!isString(pattern)) {\r\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\r\n      }\r\n\r\n      const obj = {\r\n        keyId: createKeyId(key),\r\n        pattern\r\n      };\r\n\r\n      if (auto) {\r\n        obj.searcher = createSearcher(pattern, options);\r\n      }\r\n\r\n      return obj\r\n    }\r\n\r\n    let node = {\r\n      children: [],\r\n      operator: keys[0]\r\n    };\r\n\r\n    keys.forEach((key) => {\r\n      const value = query[key];\r\n\r\n      if (isArray(value)) {\r\n        value.forEach((item) => {\r\n          node.children.push(next(item));\r\n        });\r\n      }\r\n    });\r\n\r\n    return node\r\n  };\r\n\r\n  if (!isExpression(query)) {\r\n    query = convertToExplicit(query);\r\n  }\r\n\r\n  return next(query)\r\n}\r\n\r\n// Practical scoring function\r\nfunction computeScore(\r\n  results,\r\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\r\n) {\r\n  results.forEach((result) => {\r\n    let totalScore = 1;\r\n\r\n    result.matches.forEach(({ key, norm, score }) => {\r\n      const weight = key ? key.weight : null;\r\n\r\n      totalScore *= Math.pow(\r\n        score === 0 && weight ? Number.EPSILON : score,\r\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\r\n      );\r\n    });\r\n\r\n    result.score = totalScore;\r\n  });\r\n}\r\n\r\nfunction transformMatches(result, data) {\r\n  const matches = result.matches;\r\n  data.matches = [];\r\n\r\n  if (!isDefined(matches)) {\r\n    return\r\n  }\r\n\r\n  matches.forEach((match) => {\r\n    if (!isDefined(match.indices) || !match.indices.length) {\r\n      return\r\n    }\r\n\r\n    const { indices, value } = match;\r\n\r\n    let obj = {\r\n      indices,\r\n      value\r\n    };\r\n\r\n    if (match.key) {\r\n      obj.key = match.key.src;\r\n    }\r\n\r\n    if (match.idx > -1) {\r\n      obj.refIndex = match.idx;\r\n    }\r\n\r\n    data.matches.push(obj);\r\n  });\r\n}\r\n\r\nfunction transformScore(result, data) {\r\n  data.score = result.score;\r\n}\r\n\r\nfunction format(\r\n  results,\r\n  docs,\r\n  {\r\n    includeMatches = Config.includeMatches,\r\n    includeScore = Config.includeScore\r\n  } = {}\r\n) {\r\n  const transformers = [];\r\n\r\n  if (includeMatches) transformers.push(transformMatches);\r\n  if (includeScore) transformers.push(transformScore);\r\n\r\n  return results.map((result) => {\r\n    const { idx } = result;\r\n\r\n    const data = {\r\n      item: docs[idx],\r\n      refIndex: idx\r\n    };\r\n\r\n    if (transformers.length) {\r\n      transformers.forEach((transformer) => {\r\n        transformer(result, data);\r\n      });\r\n    }\r\n\r\n    return data\r\n  })\r\n}\r\n\r\nclass Fuse {\r\n  constructor(docs, options = {}, index) {\r\n    this.options = { ...Config, ...options };\r\n\r\n    if (\r\n      this.options.useExtendedSearch &&\r\n      !true\r\n    ) {\r\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\r\n    }\r\n\r\n    this._keyStore = new KeyStore(this.options.keys);\r\n\r\n    this.setCollection(docs, index);\r\n  }\r\n\r\n  setCollection(docs, index) {\r\n    this._docs = docs;\r\n\r\n    if (index && !(index instanceof FuseIndex)) {\r\n      throw new Error(INCORRECT_INDEX_TYPE)\r\n    }\r\n\r\n    this._myIndex =\r\n      index ||\r\n      createIndex(this.options.keys, this._docs, {\r\n        getFn: this.options.getFn,\r\n        fieldNormWeight: this.options.fieldNormWeight\r\n      });\r\n  }\r\n\r\n  add(doc) {\r\n    if (!isDefined(doc)) {\r\n      return\r\n    }\r\n\r\n    this._docs.push(doc);\r\n    this._myIndex.add(doc);\r\n  }\r\n\r\n  remove(predicate = (/* doc, idx */) => false) {\r\n    const results = [];\r\n\r\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\r\n      const doc = this._docs[i];\r\n      if (predicate(doc, i)) {\r\n        this.removeAt(i);\r\n        i -= 1;\r\n        len -= 1;\r\n\r\n        results.push(doc);\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  removeAt(idx) {\r\n    this._docs.splice(idx, 1);\r\n    this._myIndex.removeAt(idx);\r\n  }\r\n\r\n  getIndex() {\r\n    return this._myIndex\r\n  }\r\n\r\n  search(query, { limit = -1 } = {}) {\r\n    const {\r\n      includeMatches,\r\n      includeScore,\r\n      shouldSort,\r\n      sortFn,\r\n      ignoreFieldNorm\r\n    } = this.options;\r\n\r\n    let results = isString(query)\r\n      ? isString(this._docs[0])\r\n        ? this._searchStringList(query)\r\n        : this._searchObjectList(query)\r\n      : this._searchLogical(query);\r\n\r\n    computeScore(results, { ignoreFieldNorm });\r\n\r\n    if (shouldSort) {\r\n      results.sort(sortFn);\r\n    }\r\n\r\n    if (isNumber(limit) && limit > -1) {\r\n      results = results.slice(0, limit);\r\n    }\r\n\r\n    return format(results, this._docs, {\r\n      includeMatches,\r\n      includeScore\r\n    })\r\n  }\r\n\r\n  _searchStringList(query) {\r\n    const searcher = createSearcher(query, this.options);\r\n    const { records } = this._myIndex;\r\n    const results = [];\r\n\r\n    // Iterate over every string in the index\r\n    records.forEach(({ v: text, i: idx, n: norm }) => {\r\n      if (!isDefined(text)) {\r\n        return\r\n      }\r\n\r\n      const { isMatch, score, indices } = searcher.searchIn(text);\r\n\r\n      if (isMatch) {\r\n        results.push({\r\n          item: text,\r\n          idx,\r\n          matches: [{ score, value: text, norm, indices }]\r\n        });\r\n      }\r\n    });\r\n\r\n    return results\r\n  }\r\n\r\n  _searchLogical(query) {\r\n\r\n    const expression = parse(query, this.options);\r\n\r\n    const evaluate = (node, item, idx) => {\r\n      if (!node.children) {\r\n        const { keyId, searcher } = node;\r\n\r\n        const matches = this._findMatches({\r\n          key: this._keyStore.get(keyId),\r\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\r\n          searcher\r\n        });\r\n\r\n        if (matches && matches.length) {\r\n          return [\r\n            {\r\n              idx,\r\n              item,\r\n              matches\r\n            }\r\n          ]\r\n        }\r\n\r\n        return []\r\n      }\r\n\r\n      const res = [];\r\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\r\n        const child = node.children[i];\r\n        const result = evaluate(child, item, idx);\r\n        if (result.length) {\r\n          res.push(...result);\r\n        } else if (node.operator === LogicalOperator.AND) {\r\n          return []\r\n        }\r\n      }\r\n      return res\r\n    };\r\n\r\n    const records = this._myIndex.records;\r\n    const resultMap = {};\r\n    const results = [];\r\n\r\n    records.forEach(({ $: item, i: idx }) => {\r\n      if (isDefined(item)) {\r\n        let expResults = evaluate(expression, item, idx);\r\n\r\n        if (expResults.length) {\r\n          // Dedupe when adding\r\n          if (!resultMap[idx]) {\r\n            resultMap[idx] = { idx, item, matches: [] };\r\n            results.push(resultMap[idx]);\r\n          }\r\n          expResults.forEach(({ matches }) => {\r\n            resultMap[idx].matches.push(...matches);\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return results\r\n  }\r\n\r\n  _searchObjectList(query) {\r\n    const searcher = createSearcher(query, this.options);\r\n    const { keys, records } = this._myIndex;\r\n    const results = [];\r\n\r\n    // List is Array<Object>\r\n    records.forEach(({ $: item, i: idx }) => {\r\n      if (!isDefined(item)) {\r\n        return\r\n      }\r\n\r\n      let matches = [];\r\n\r\n      // Iterate over every key (i.e, path), and fetch the value at that key\r\n      keys.forEach((key, keyIndex) => {\r\n        matches.push(\r\n          ...this._findMatches({\r\n            key,\r\n            value: item[keyIndex],\r\n            searcher\r\n          })\r\n        );\r\n      });\r\n\r\n      if (matches.length) {\r\n        results.push({\r\n          idx,\r\n          item,\r\n          matches\r\n        });\r\n      }\r\n    });\r\n\r\n    return results\r\n  }\r\n  _findMatches({ key, value, searcher }) {\r\n    if (!isDefined(value)) {\r\n      return []\r\n    }\r\n\r\n    let matches = [];\r\n\r\n    if (isArray(value)) {\r\n      value.forEach(({ v: text, i: idx, n: norm }) => {\r\n        if (!isDefined(text)) {\r\n          return\r\n        }\r\n\r\n        const { isMatch, score, indices } = searcher.searchIn(text);\r\n\r\n        if (isMatch) {\r\n          matches.push({\r\n            score,\r\n            key,\r\n            value: text,\r\n            idx,\r\n            norm,\r\n            indices\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      const { v: text, n: norm } = value;\r\n\r\n      const { isMatch, score, indices } = searcher.searchIn(text);\r\n\r\n      if (isMatch) {\r\n        matches.push({ score, key, value: text, norm, indices });\r\n      }\r\n    }\r\n\r\n    return matches\r\n  }\r\n}\r\n\r\nFuse.version = '6.5.3';\r\nFuse.createIndex = createIndex;\r\nFuse.parseIndex = parseIndex;\r\nFuse.config = Config;\r\n\r\n{\r\n  Fuse.parseQuery = parse;\r\n}\r\n\r\n{\r\n  register(ExtendedSearch);\r\n}\r\n\r\nexport { Fuse as default };\r\n"]},"metadata":{},"sourceType":"module"}