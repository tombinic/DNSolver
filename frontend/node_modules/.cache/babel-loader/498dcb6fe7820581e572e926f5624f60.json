{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\n\nvar isMatchMediaAvailable = function isMatchMediaAvailable() {\n  return typeof window !== 'undefined' && 'matchMedia' in window;\n};\n/**\n * Use for any programatic motions needed at runtime.\n * Will return `true` if the current user prefers reduced motion.\n * This is generally set through OS preferences/settings.\n */\n\n\nexport var isReducedMotion = function isReducedMotion() {\n  if (!isMatchMediaAvailable()) {\n    return false;\n  }\n\n  var _window$matchMedia = window.matchMedia('(prefers-reduced-motion: reduce)'),\n      matches = _window$matchMedia.matches;\n\n  return matches;\n};\n/**\n * A React hook version of {@link isReducedMotion}.\n * Useful for React components that need to re-render if the user's motion\n * preference changes at runtime.\n */\n\nexport var useIsReducedMotion = function useIsReducedMotion() {\n  var _useState = useState(isReducedMotion),\n      _useState2 = _slicedToArray(_useState, 2),\n      prefersReducedMotion = _useState2[0],\n      setPrefersReducedMotion = _useState2[1];\n\n  useEffect(function () {\n    if (!isMatchMediaAvailable()) {\n      return;\n    }\n\n    var mediaQueryList = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n    var onChange = function onChange(event) {\n      return setPrefersReducedMotion(event.matches);\n    };\n\n    mediaQueryList.addEventListener('change', onChange);\n    return function () {\n      mediaQueryList.removeEventListener('change', onChange);\n    };\n  }, []);\n  return prefersReducedMotion;\n};\n/**\n * Use for any CSS based motion (animation or transition).\n * Always put at the end of your declaration for correct use of the cascade.\n * Reduced motion preference is generally set through OS preferences/settings.\n */\n\nexport var prefersReducedMotion = function prefersReducedMotion() {\n  return {\n    '@media (prefers-reduced-motion: reduce)': {\n      animation: 'none',\n      transition: 'none'\n    }\n  };\n};","map":{"version":3,"sources":["D:/unipr/Telematica/Progetto/Telematica/frontend/node_modules/@atlaskit/tooltip/node_modules/@atlaskit/motion/dist/esm/utils/accessibility.js"],"names":["_slicedToArray","useEffect","useState","isMatchMediaAvailable","window","isReducedMotion","_window$matchMedia","matchMedia","matches","useIsReducedMotion","_useState","_useState2","prefersReducedMotion","setPrefersReducedMotion","mediaQueryList","onChange","event","addEventListener","removeEventListener","animation","transition"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,sCAA3B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,GAAiC;AAC3D,SAAO,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,gBAAgBA,MAAxD;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,IAAIC,eAAe,GAAG,SAASA,eAAT,GAA2B;AACtD,MAAI,CAACF,qBAAqB,EAA1B,EAA8B;AAC5B,WAAO,KAAP;AACD;;AAED,MAAIG,kBAAkB,GAAGF,MAAM,CAACG,UAAP,CAAkB,kCAAlB,CAAzB;AAAA,MACIC,OAAO,GAAGF,kBAAkB,CAACE,OADjC;;AAGA,SAAOA,OAAP;AACD,CATM;AAUP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,GAA8B;AAC5D,MAAIC,SAAS,GAAGR,QAAQ,CAACG,eAAD,CAAxB;AAAA,MACIM,UAAU,GAAGX,cAAc,CAACU,SAAD,EAAY,CAAZ,CAD/B;AAAA,MAEIE,oBAAoB,GAAGD,UAAU,CAAC,CAAD,CAFrC;AAAA,MAGIE,uBAAuB,GAAGF,UAAU,CAAC,CAAD,CAHxC;;AAKAV,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAI,CAACE,qBAAqB,EAA1B,EAA8B;AAC5B;AACD;;AAED,QAAIW,cAAc,GAAGV,MAAM,CAACG,UAAP,CAAkB,kCAAlB,CAArB;;AAEA,QAAIQ,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,aAAOH,uBAAuB,CAACG,KAAK,CAACR,OAAP,CAA9B;AACD,KAFD;;AAIAM,IAAAA,cAAc,CAACG,gBAAf,CAAgC,QAAhC,EAA0CF,QAA1C;AACA,WAAO,YAAY;AACjBD,MAAAA,cAAc,CAACI,mBAAf,CAAmC,QAAnC,EAA6CH,QAA7C;AACD,KAFD;AAGD,GAfQ,EAeN,EAfM,CAAT;AAgBA,SAAOH,oBAAP;AACD,CAvBM;AAwBP;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIA,oBAAoB,GAAG,SAASA,oBAAT,GAAgC;AAChE,SAAO;AACL,+CAA2C;AACzCO,MAAAA,SAAS,EAAE,MAD8B;AAEzCC,MAAAA,UAAU,EAAE;AAF6B;AADtC,GAAP;AAMD,CAPM","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\n\nvar isMatchMediaAvailable = function isMatchMediaAvailable() {\n  return typeof window !== 'undefined' && 'matchMedia' in window;\n};\n/**\n * Use for any programatic motions needed at runtime.\n * Will return `true` if the current user prefers reduced motion.\n * This is generally set through OS preferences/settings.\n */\n\n\nexport var isReducedMotion = function isReducedMotion() {\n  if (!isMatchMediaAvailable()) {\n    return false;\n  }\n\n  var _window$matchMedia = window.matchMedia('(prefers-reduced-motion: reduce)'),\n      matches = _window$matchMedia.matches;\n\n  return matches;\n};\n/**\n * A React hook version of {@link isReducedMotion}.\n * Useful for React components that need to re-render if the user's motion\n * preference changes at runtime.\n */\n\nexport var useIsReducedMotion = function useIsReducedMotion() {\n  var _useState = useState(isReducedMotion),\n      _useState2 = _slicedToArray(_useState, 2),\n      prefersReducedMotion = _useState2[0],\n      setPrefersReducedMotion = _useState2[1];\n\n  useEffect(function () {\n    if (!isMatchMediaAvailable()) {\n      return;\n    }\n\n    var mediaQueryList = window.matchMedia('(prefers-reduced-motion: reduce)');\n\n    var onChange = function onChange(event) {\n      return setPrefersReducedMotion(event.matches);\n    };\n\n    mediaQueryList.addEventListener('change', onChange);\n    return function () {\n      mediaQueryList.removeEventListener('change', onChange);\n    };\n  }, []);\n  return prefersReducedMotion;\n};\n/**\n * Use for any CSS based motion (animation or transition).\n * Always put at the end of your declaration for correct use of the cascade.\n * Reduced motion preference is generally set through OS preferences/settings.\n */\n\nexport var prefersReducedMotion = function prefersReducedMotion() {\n  return {\n    '@media (prefers-reduced-motion: reduce)': {\n      animation: 'none',\n      transition: 'none'\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}